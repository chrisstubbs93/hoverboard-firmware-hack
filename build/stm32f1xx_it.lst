ARM GAS  /tmp/ccTYfmhp.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"stm32f1xx_it.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.NMI_Handler,"ax",%progbits
  16              		.align	1
  17              		.global	NMI_Handler
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	NMI_Handler:
  24              	.LFB66:
  25              		.file 1 "src/stm32f1xx_it.c"
   1:src/stm32f1xx_it.c **** /**
   2:src/stm32f1xx_it.c ****   ******************************************************************************
   3:src/stm32f1xx_it.c ****   * @file    stm32f1xx_it.c
   4:src/stm32f1xx_it.c ****   * @brief   Interrupt Service Routines.
   5:src/stm32f1xx_it.c ****   ******************************************************************************
   6:src/stm32f1xx_it.c ****   *
   7:src/stm32f1xx_it.c ****   * COPYRIGHT(c) 2017 STMicroelectronics
   8:src/stm32f1xx_it.c ****   *
   9:src/stm32f1xx_it.c ****   * Redistribution and use in source and binary forms, with or without modification,
  10:src/stm32f1xx_it.c ****   * are permitted provided that the following conditions are met:
  11:src/stm32f1xx_it.c ****   *   1. Redistributions of source code must retain the above copyright notice,
  12:src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer.
  13:src/stm32f1xx_it.c ****   *   2. Redistributions in binary form must reproduce the above copyright notice,
  14:src/stm32f1xx_it.c ****   *      this list of conditions and the following disclaimer in the documentation
  15:src/stm32f1xx_it.c ****   *      and/or other materials provided with the distribution.
  16:src/stm32f1xx_it.c ****   *   3. Neither the name of STMicroelectronics nor the names of its contributors
  17:src/stm32f1xx_it.c ****   *      may be used to endorse or promote products derived from this software
  18:src/stm32f1xx_it.c ****   *      without specific prior written permission.
  19:src/stm32f1xx_it.c ****   *
  20:src/stm32f1xx_it.c ****   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:src/stm32f1xx_it.c ****   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:src/stm32f1xx_it.c ****   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  23:src/stm32f1xx_it.c ****   * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  24:src/stm32f1xx_it.c ****   * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  25:src/stm32f1xx_it.c ****   * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  26:src/stm32f1xx_it.c ****   * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  27:src/stm32f1xx_it.c ****   * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  28:src/stm32f1xx_it.c ****   * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  29:src/stm32f1xx_it.c ****   * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  30:src/stm32f1xx_it.c ****   *
  31:src/stm32f1xx_it.c ****   ******************************************************************************
  32:src/stm32f1xx_it.c ****   */
  33:src/stm32f1xx_it.c **** /* Includes ------------------------------------------------------------------*/
ARM GAS  /tmp/ccTYfmhp.s 			page 2


  34:src/stm32f1xx_it.c **** #include "stm32f1xx_hal.h"
  35:src/stm32f1xx_it.c **** #include "stm32f1xx.h"
  36:src/stm32f1xx_it.c **** #include "stm32f1xx_it.h"
  37:src/stm32f1xx_it.c **** #include "config.h"
  38:src/stm32f1xx_it.c **** #include "hallinterrupts.h"
  39:src/stm32f1xx_it.c **** 
  40:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_rx;
  41:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_i2c2_tx;
  42:src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
  43:src/stm32f1xx_it.c **** 
  44:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_rx;
  45:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart2_tx;
  46:src/stm32f1xx_it.c **** extern TIM_HandleTypeDef htim3;
  47:src/stm32f1xx_it.c **** 
  48:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_rx;
  49:src/stm32f1xx_it.c **** extern DMA_HandleTypeDef hdma_usart3_tx;
  50:src/stm32f1xx_it.c **** 
  51:src/stm32f1xx_it.c **** /* USER CODE BEGIN 0 */
  52:src/stm32f1xx_it.c **** 
  53:src/stm32f1xx_it.c **** /* USER CODE END 0 */
  54:src/stm32f1xx_it.c **** 
  55:src/stm32f1xx_it.c **** /* External variables --------------------------------------------------------*/
  56:src/stm32f1xx_it.c **** 
  57:src/stm32f1xx_it.c **** 
  58:src/stm32f1xx_it.c **** /******************************************************************************/
  59:src/stm32f1xx_it.c **** /*            Cortex-M3 Processor Interruption and Exception Handlers         */
  60:src/stm32f1xx_it.c **** /******************************************************************************/
  61:src/stm32f1xx_it.c **** 
  62:src/stm32f1xx_it.c **** /**
  63:src/stm32f1xx_it.c **** * @brief This function handles Non maskable interrupt.
  64:src/stm32f1xx_it.c **** */
  65:src/stm32f1xx_it.c **** void NMI_Handler(void) {
  26              		.loc 1 65 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  66:src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  67:src/stm32f1xx_it.c **** 
  68:src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 0 */
  69:src/stm32f1xx_it.c ****   /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  70:src/stm32f1xx_it.c **** 
  71:src/stm32f1xx_it.c ****   /* USER CODE END NonMaskableInt_IRQn 1 */
  72:src/stm32f1xx_it.c **** }
  31              		.loc 1 72 0
  32 0000 7047     		bx	lr
  33              		.cfi_endproc
  34              	.LFE66:
  36              		.section	.text.HardFault_Handler,"ax",%progbits
  37              		.align	1
  38              		.global	HardFault_Handler
  39              		.syntax unified
  40              		.thumb
  41              		.thumb_func
  42              		.fpu softvfp
  44              	HardFault_Handler:
  45              	.LFB67:
ARM GAS  /tmp/ccTYfmhp.s 			page 3


  73:src/stm32f1xx_it.c **** 
  74:src/stm32f1xx_it.c **** /**
  75:src/stm32f1xx_it.c **** * @brief This function handles Hard fault interrupt.
  76:src/stm32f1xx_it.c **** */
  77:src/stm32f1xx_it.c **** void HardFault_Handler(void) {
  46              		.loc 1 77 0
  47              		.cfi_startproc
  48              		@ Volatile: function does not return.
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.L3:
  53 0000 FEE7     		b	.L3
  54              		.cfi_endproc
  55              	.LFE67:
  57              		.section	.text.MemManage_Handler,"ax",%progbits
  58              		.align	1
  59              		.global	MemManage_Handler
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu softvfp
  65              	MemManage_Handler:
  66              	.LFB68:
  78:src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 0 */
  79:src/stm32f1xx_it.c **** 
  80:src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 0 */
  81:src/stm32f1xx_it.c ****   while(1) {
  82:src/stm32f1xx_it.c ****   }
  83:src/stm32f1xx_it.c ****   /* USER CODE BEGIN HardFault_IRQn 1 */
  84:src/stm32f1xx_it.c **** 
  85:src/stm32f1xx_it.c ****   /* USER CODE END HardFault_IRQn 1 */
  86:src/stm32f1xx_it.c **** }
  87:src/stm32f1xx_it.c **** 
  88:src/stm32f1xx_it.c **** /**
  89:src/stm32f1xx_it.c **** * @brief This function handles Memory management fault.
  90:src/stm32f1xx_it.c **** */
  91:src/stm32f1xx_it.c **** void MemManage_Handler(void) {
  67              		.loc 1 91 0
  68              		.cfi_startproc
  69              		@ Volatile: function does not return.
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.L5:
  74 0000 FEE7     		b	.L5
  75              		.cfi_endproc
  76              	.LFE68:
  78              		.section	.text.BusFault_Handler,"ax",%progbits
  79              		.align	1
  80              		.global	BusFault_Handler
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu softvfp
  86              	BusFault_Handler:
  87              	.LFB69:
ARM GAS  /tmp/ccTYfmhp.s 			page 4


  92:src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 0 */
  93:src/stm32f1xx_it.c **** 
  94:src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 0 */
  95:src/stm32f1xx_it.c ****   while(1) {
  96:src/stm32f1xx_it.c ****   }
  97:src/stm32f1xx_it.c ****   /* USER CODE BEGIN MemoryManagement_IRQn 1 */
  98:src/stm32f1xx_it.c **** 
  99:src/stm32f1xx_it.c ****   /* USER CODE END MemoryManagement_IRQn 1 */
 100:src/stm32f1xx_it.c **** }
 101:src/stm32f1xx_it.c **** 
 102:src/stm32f1xx_it.c **** /**
 103:src/stm32f1xx_it.c **** * @brief This function handles Prefetch fault, memory access fault.
 104:src/stm32f1xx_it.c **** */
 105:src/stm32f1xx_it.c **** void BusFault_Handler(void) {
  88              		.loc 1 105 0
  89              		.cfi_startproc
  90              		@ Volatile: function does not return.
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		@ link register save eliminated.
  94              	.L7:
  95 0000 FEE7     		b	.L7
  96              		.cfi_endproc
  97              	.LFE69:
  99              		.section	.text.UsageFault_Handler,"ax",%progbits
 100              		.align	1
 101              		.global	UsageFault_Handler
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu softvfp
 107              	UsageFault_Handler:
 108              	.LFB70:
 106:src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 0 */
 107:src/stm32f1xx_it.c **** 
 108:src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 0 */
 109:src/stm32f1xx_it.c ****   while(1) {
 110:src/stm32f1xx_it.c ****   }
 111:src/stm32f1xx_it.c ****   /* USER CODE BEGIN BusFault_IRQn 1 */
 112:src/stm32f1xx_it.c **** 
 113:src/stm32f1xx_it.c ****   /* USER CODE END BusFault_IRQn 1 */
 114:src/stm32f1xx_it.c **** }
 115:src/stm32f1xx_it.c **** 
 116:src/stm32f1xx_it.c **** /**
 117:src/stm32f1xx_it.c **** * @brief This function handles Undefined instruction or illegal state.
 118:src/stm32f1xx_it.c **** */
 119:src/stm32f1xx_it.c **** void UsageFault_Handler(void) {
 109              		.loc 1 119 0
 110              		.cfi_startproc
 111              		@ Volatile: function does not return.
 112              		@ args = 0, pretend = 0, frame = 0
 113              		@ frame_needed = 0, uses_anonymous_args = 0
 114              		@ link register save eliminated.
 115              	.L9:
 116 0000 FEE7     		b	.L9
 117              		.cfi_endproc
 118              	.LFE70:
ARM GAS  /tmp/ccTYfmhp.s 			page 5


 120              		.section	.text.SVC_Handler,"ax",%progbits
 121              		.align	1
 122              		.global	SVC_Handler
 123              		.syntax unified
 124              		.thumb
 125              		.thumb_func
 126              		.fpu softvfp
 128              	SVC_Handler:
 129              	.LFB71:
 120:src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 0 */
 121:src/stm32f1xx_it.c **** 
 122:src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 0 */
 123:src/stm32f1xx_it.c ****   while(1) {
 124:src/stm32f1xx_it.c ****   }
 125:src/stm32f1xx_it.c ****   /* USER CODE BEGIN UsageFault_IRQn 1 */
 126:src/stm32f1xx_it.c **** 
 127:src/stm32f1xx_it.c ****   /* USER CODE END UsageFault_IRQn 1 */
 128:src/stm32f1xx_it.c **** }
 129:src/stm32f1xx_it.c **** 
 130:src/stm32f1xx_it.c **** /**
 131:src/stm32f1xx_it.c **** * @brief This function handles System service call via SWI instruction.
 132:src/stm32f1xx_it.c **** */
 133:src/stm32f1xx_it.c **** void SVC_Handler(void) {
 130              		.loc 1 133 0
 131              		.cfi_startproc
 132              		@ args = 0, pretend = 0, frame = 0
 133              		@ frame_needed = 0, uses_anonymous_args = 0
 134              		@ link register save eliminated.
 134:src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 0 */
 135:src/stm32f1xx_it.c **** 
 136:src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 0 */
 137:src/stm32f1xx_it.c ****   /* USER CODE BEGIN SVCall_IRQn 1 */
 138:src/stm32f1xx_it.c **** 
 139:src/stm32f1xx_it.c ****   /* USER CODE END SVCall_IRQn 1 */
 140:src/stm32f1xx_it.c **** }
 135              		.loc 1 140 0
 136 0000 7047     		bx	lr
 137              		.cfi_endproc
 138              	.LFE71:
 140              		.section	.text.DebugMon_Handler,"ax",%progbits
 141              		.align	1
 142              		.global	DebugMon_Handler
 143              		.syntax unified
 144              		.thumb
 145              		.thumb_func
 146              		.fpu softvfp
 148              	DebugMon_Handler:
 149              	.LFB72:
 141:src/stm32f1xx_it.c **** 
 142:src/stm32f1xx_it.c **** /**
 143:src/stm32f1xx_it.c **** * @brief This function handles Debug monitor.
 144:src/stm32f1xx_it.c **** */
 145:src/stm32f1xx_it.c **** void DebugMon_Handler(void) {
 150              		.loc 1 145 0
 151              		.cfi_startproc
 152              		@ args = 0, pretend = 0, frame = 0
 153              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccTYfmhp.s 			page 6


 154              		@ link register save eliminated.
 146:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 0 */
 147:src/stm32f1xx_it.c **** 
 148:src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 0 */
 149:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DebugMonitor_IRQn 1 */
 150:src/stm32f1xx_it.c **** 
 151:src/stm32f1xx_it.c ****   /* USER CODE END DebugMonitor_IRQn 1 */
 152:src/stm32f1xx_it.c **** }
 155              		.loc 1 152 0
 156 0000 7047     		bx	lr
 157              		.cfi_endproc
 158              	.LFE72:
 160              		.section	.text.PendSV_Handler,"ax",%progbits
 161              		.align	1
 162              		.global	PendSV_Handler
 163              		.syntax unified
 164              		.thumb
 165              		.thumb_func
 166              		.fpu softvfp
 168              	PendSV_Handler:
 169              	.LFB73:
 153:src/stm32f1xx_it.c **** 
 154:src/stm32f1xx_it.c **** /**
 155:src/stm32f1xx_it.c **** * @brief This function handles Pendable request for system service.
 156:src/stm32f1xx_it.c **** */
 157:src/stm32f1xx_it.c **** void PendSV_Handler(void) {
 170              		.loc 1 157 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 0
 173              		@ frame_needed = 0, uses_anonymous_args = 0
 174              		@ link register save eliminated.
 158:src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 0 */
 159:src/stm32f1xx_it.c **** 
 160:src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 0 */
 161:src/stm32f1xx_it.c ****   /* USER CODE BEGIN PendSV_IRQn 1 */
 162:src/stm32f1xx_it.c **** 
 163:src/stm32f1xx_it.c ****   /* USER CODE END PendSV_IRQn 1 */
 164:src/stm32f1xx_it.c **** }
 175              		.loc 1 164 0
 176 0000 7047     		bx	lr
 177              		.cfi_endproc
 178              	.LFE73:
 180              		.section	.text.SysTick_Handler,"ax",%progbits
 181              		.align	1
 182              		.global	SysTick_Handler
 183              		.syntax unified
 184              		.thumb
 185              		.thumb_func
 186              		.fpu softvfp
 188              	SysTick_Handler:
 189              	.LFB74:
 165:src/stm32f1xx_it.c **** 
 166:src/stm32f1xx_it.c **** /**
 167:src/stm32f1xx_it.c **** * @brief This function handles System tick timer.
 168:src/stm32f1xx_it.c **** */
 169:src/stm32f1xx_it.c **** #ifdef CONTROL_PPM
 170:src/stm32f1xx_it.c **** void PPM_SysTick_Callback(void);
ARM GAS  /tmp/ccTYfmhp.s 			page 7


 171:src/stm32f1xx_it.c **** #endif
 172:src/stm32f1xx_it.c **** void SysTick_Handler(void) {
 190              		.loc 1 172 0
 191              		.cfi_startproc
 192              		@ args = 0, pretend = 0, frame = 0
 193              		@ frame_needed = 0, uses_anonymous_args = 0
 194 0000 08B5     		push	{r3, lr}
 195              	.LCFI0:
 196              		.cfi_def_cfa_offset 8
 197              		.cfi_offset 3, -8
 198              		.cfi_offset 14, -4
 173:src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 0 */
 174:src/stm32f1xx_it.c **** 
 175:src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 0 */
 176:src/stm32f1xx_it.c ****   HAL_IncTick();
 199              		.loc 1 176 0
 200 0002 FFF7FEFF 		bl	HAL_IncTick
 201              	.LVL0:
 177:src/stm32f1xx_it.c ****   HAL_SYSTICK_IRQHandler();
 202              		.loc 1 177 0
 203 0006 FFF7FEFF 		bl	HAL_SYSTICK_IRQHandler
 204              	.LVL1:
 178:src/stm32f1xx_it.c ****   /* USER CODE BEGIN SysTick_IRQn 1 */
 179:src/stm32f1xx_it.c **** #ifdef CONTROL_PPM
 180:src/stm32f1xx_it.c ****   PPM_SysTick_Callback();
 181:src/stm32f1xx_it.c **** #endif
 182:src/stm32f1xx_it.c ****   /* USER CODE END SysTick_IRQn 1 */
 183:src/stm32f1xx_it.c **** }
 205              		.loc 1 183 0
 206 000a 08BD     		pop	{r3, pc}
 207              		.cfi_endproc
 208              	.LFE74:
 210              		.section	.text.EXTI9_5_IRQHandler,"ax",%progbits
 211              		.align	1
 212              		.global	EXTI9_5_IRQHandler
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu softvfp
 218              	EXTI9_5_IRQHandler:
 219              	.LFB75:
 184:src/stm32f1xx_it.c **** 
 185:src/stm32f1xx_it.c **** #ifdef CONTROL_NUNCHUCK
 186:src/stm32f1xx_it.c **** extern I2C_HandleTypeDef hi2c2;
 187:src/stm32f1xx_it.c **** void I2C1_EV_IRQHandler(void)
 188:src/stm32f1xx_it.c **** {
 189:src/stm32f1xx_it.c ****   HAL_I2C_EV_IRQHandler(&hi2c2);
 190:src/stm32f1xx_it.c **** }
 191:src/stm32f1xx_it.c **** 
 192:src/stm32f1xx_it.c **** void I2C1_ER_IRQHandler(void)
 193:src/stm32f1xx_it.c **** {
 194:src/stm32f1xx_it.c ****   HAL_I2C_ER_IRQHandler(&hi2c2);
 195:src/stm32f1xx_it.c **** }
 196:src/stm32f1xx_it.c **** 
 197:src/stm32f1xx_it.c **** /**
 198:src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel4 global interrupt.
 199:src/stm32f1xx_it.c **** */
ARM GAS  /tmp/ccTYfmhp.s 			page 8


 200:src/stm32f1xx_it.c **** void DMA1_Channel4_IRQHandler(void)
 201:src/stm32f1xx_it.c **** {
 202:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 203:src/stm32f1xx_it.c **** 
 204:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 205:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 206:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 207:src/stm32f1xx_it.c **** 
 208:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 209:src/stm32f1xx_it.c **** }
 210:src/stm32f1xx_it.c **** 
 211:src/stm32f1xx_it.c **** /**
 212:src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 213:src/stm32f1xx_it.c **** */
 214:src/stm32f1xx_it.c **** void DMA1_Channel5_IRQHandler(void)
 215:src/stm32f1xx_it.c **** {
 216:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 217:src/stm32f1xx_it.c **** 
 218:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 219:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 220:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 221:src/stm32f1xx_it.c **** 
 222:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 223:src/stm32f1xx_it.c **** }
 224:src/stm32f1xx_it.c **** #endif
 225:src/stm32f1xx_it.c **** 
 226:src/stm32f1xx_it.c **** #ifdef CONTROL_PPM
 227:src/stm32f1xx_it.c **** void EXTI3_IRQHandler(void)
 228:src/stm32f1xx_it.c **** {
 229:src/stm32f1xx_it.c ****     PPM_ISR_Callback();
 230:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 231:src/stm32f1xx_it.c **** }
 232:src/stm32f1xx_it.c **** #endif
 233:src/stm32f1xx_it.c **** 
 234:src/stm32f1xx_it.c **** /////////////////////////////////////////////////////////////////////
 235:src/stm32f1xx_it.c **** // actual IRQ for LEFT pins 5,6,7
 236:src/stm32f1xx_it.c **** void EXTI9_5_IRQHandler(void)
 237:src/stm32f1xx_it.c **** {
 220              		.loc 1 237 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224 0000 08B5     		push	{r3, lr}
 225              	.LCFI1:
 226              		.cfi_def_cfa_offset 8
 227              		.cfi_offset 3, -8
 228              		.cfi_offset 14, -4
 229              	.LVL2:
 238:src/stm32f1xx_it.c ****   unsigned long triggered = 0;
 239:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_9) != RESET)
 230              		.loc 1 239 0
 231 0002 1B4B     		ldr	r3, .L24
 232 0004 5B69     		ldr	r3, [r3, #20]
 233 0006 13F40073 		ands	r3, r3, #512
 234 000a 03D0     		beq	.L16
 240:src/stm32f1xx_it.c ****   {
 241:src/stm32f1xx_it.c ****     /* Clear the EXTI line 8 pending bit */
ARM GAS  /tmp/ccTYfmhp.s 			page 9


 242:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_9);
 235              		.loc 1 242 0
 236 000c 4FF40073 		mov	r3, #512
 237 0010 174A     		ldr	r2, .L24
 238 0012 5361     		str	r3, [r2, #20]
 239              	.LVL3:
 240              	.L16:
 243:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_9;
 244:src/stm32f1xx_it.c ****   }
 245:src/stm32f1xx_it.c **** 
 246:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != RESET)
 241              		.loc 1 246 0
 242 0014 164A     		ldr	r2, .L24
 243 0016 5269     		ldr	r2, [r2, #20]
 244 0018 12F4807F 		tst	r2, #256
 245 001c 05D0     		beq	.L17
 247:src/stm32f1xx_it.c ****   {
 248:src/stm32f1xx_it.c ****     /* Clear the EXTI line 9 pending bit */
 249:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 246              		.loc 1 249 0
 247 001e 144A     		ldr	r2, .L24
 248 0020 4FF48071 		mov	r1, #256
 249 0024 5161     		str	r1, [r2, #20]
 250:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_9;
 250              		.loc 1 250 0
 251 0026 43F40073 		orr	r3, r3, #512
 252              	.LVL4:
 253              	.L17:
 251:src/stm32f1xx_it.c ****   }
 252:src/stm32f1xx_it.c **** 
 253:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 254              		.loc 1 253 0
 255 002a 114A     		ldr	r2, .L24
 256 002c 5269     		ldr	r2, [r2, #20]
 257 002e 12F0800F 		tst	r2, #128
 258 0032 03D0     		beq	.L18
 254:src/stm32f1xx_it.c ****   {
 255:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 256:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 259              		.loc 1 256 0
 260 0034 0E4A     		ldr	r2, .L24
 261 0036 8021     		movs	r1, #128
 262 0038 5161     		str	r1, [r2, #20]
 257:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_7;
 263              		.loc 1 257 0
 264 003a 0B43     		orrs	r3, r3, r1
 265              	.LVL5:
 266              	.L18:
 258:src/stm32f1xx_it.c ****   }
 259:src/stm32f1xx_it.c **** 
 260:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_6) != RESET)
 267              		.loc 1 260 0
 268 003c 0C4A     		ldr	r2, .L24
 269 003e 5269     		ldr	r2, [r2, #20]
 270 0040 12F0400F 		tst	r2, #64
 271 0044 03D0     		beq	.L19
 261:src/stm32f1xx_it.c ****   {
ARM GAS  /tmp/ccTYfmhp.s 			page 10


 262:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 263:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 272              		.loc 1 263 0
 273 0046 0A4A     		ldr	r2, .L24
 274 0048 4021     		movs	r1, #64
 275 004a 5161     		str	r1, [r2, #20]
 264:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_6;
 276              		.loc 1 264 0
 277 004c 0B43     		orrs	r3, r3, r1
 278              	.LVL6:
 279              	.L19:
 265:src/stm32f1xx_it.c ****   }
 266:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5) != RESET)
 280              		.loc 1 266 0
 281 004e 084A     		ldr	r2, .L24
 282 0050 5269     		ldr	r2, [r2, #20]
 283 0052 12F0200F 		tst	r2, #32
 284 0056 03D0     		beq	.L20
 267:src/stm32f1xx_it.c ****   {
 268:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 269:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 285              		.loc 1 269 0
 286 0058 054A     		ldr	r2, .L24
 287 005a 2021     		movs	r1, #32
 288 005c 5161     		str	r1, [r2, #20]
 270:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_5;
 289              		.loc 1 270 0
 290 005e 0B43     		orrs	r3, r3, r1
 291              	.LVL7:
 292              	.L20:
 271:src/stm32f1xx_it.c ****   }
 272:src/stm32f1xx_it.c **** 
 273:src/stm32f1xx_it.c **** #ifdef HALL_INTERRUPTS
 274:src/stm32f1xx_it.c ****   if (triggered & HALL_PIN_MASK)
 293              		.loc 1 274 0
 294 0060 13F4E75F 		tst	r3, #7392
 295 0064 00D1     		bne	.L23
 296              	.LVL8:
 297              	.L15:
 275:src/stm32f1xx_it.c ****     HallInterruptsInterrupt();
 276:src/stm32f1xx_it.c **** #endif
 277:src/stm32f1xx_it.c **** }
 298              		.loc 1 277 0
 299 0066 08BD     		pop	{r3, pc}
 300              	.LVL9:
 301              	.L23:
 275:src/stm32f1xx_it.c ****     HallInterruptsInterrupt();
 302              		.loc 1 275 0
 303 0068 FFF7FEFF 		bl	HallInterruptsInterrupt
 304              	.LVL10:
 305              		.loc 1 277 0
 306 006c FBE7     		b	.L15
 307              	.L25:
 308 006e 00BF     		.align	2
 309              	.L24:
 310 0070 00040140 		.word	1073808384
 311              		.cfi_endproc
ARM GAS  /tmp/ccTYfmhp.s 			page 11


 312              	.LFE75:
 314              		.section	.text.EXTI15_10_IRQHandler,"ax",%progbits
 315              		.align	1
 316              		.global	EXTI15_10_IRQHandler
 317              		.syntax unified
 318              		.thumb
 319              		.thumb_func
 320              		.fpu softvfp
 322              	EXTI15_10_IRQHandler:
 323              	.LFB76:
 278:src/stm32f1xx_it.c **** 
 279:src/stm32f1xx_it.c **** /////////////////////////////////////////////////////////////////////
 280:src/stm32f1xx_it.c **** // actual IRQ for RIGHT pins 10, 11, 12
 281:src/stm32f1xx_it.c **** void EXTI15_10_IRQHandler(void)
 282:src/stm32f1xx_it.c **** {
 324              		.loc 1 282 0
 325              		.cfi_startproc
 326              		@ args = 0, pretend = 0, frame = 0
 327              		@ frame_needed = 0, uses_anonymous_args = 0
 328 0000 08B5     		push	{r3, lr}
 329              	.LCFI2:
 330              		.cfi_def_cfa_offset 8
 331              		.cfi_offset 3, -8
 332              		.cfi_offset 14, -4
 333              	.LVL11:
 283:src/stm32f1xx_it.c ****   unsigned long triggered = 0;
 284:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_15) != RESET)
 334              		.loc 1 284 0
 335 0002 214B     		ldr	r3, .L36
 336 0004 5B69     		ldr	r3, [r3, #20]
 337 0006 13F40043 		ands	r3, r3, #32768
 338 000a 03D0     		beq	.L27
 285:src/stm32f1xx_it.c ****   {
 286:src/stm32f1xx_it.c ****     /* Clear the EXTI line 8 pending bit */
 287:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_15);
 339              		.loc 1 287 0
 340 000c 4FF40043 		mov	r3, #32768
 341 0010 1D4A     		ldr	r2, .L36
 342 0012 5361     		str	r3, [r2, #20]
 343              	.LVL12:
 344              	.L27:
 288:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_15;
 289:src/stm32f1xx_it.c ****   }
 290:src/stm32f1xx_it.c **** 
 291:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_14) != RESET)
 345              		.loc 1 291 0
 346 0014 1C4A     		ldr	r2, .L36
 347 0016 5269     		ldr	r2, [r2, #20]
 348 0018 12F4804F 		tst	r2, #16384
 349 001c 04D0     		beq	.L28
 292:src/stm32f1xx_it.c ****   {
 293:src/stm32f1xx_it.c ****     /* Clear the EXTI line 9 pending bit */
 294:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_14);
 350              		.loc 1 294 0
 351 001e 1A4A     		ldr	r2, .L36
 352 0020 4FF48041 		mov	r1, #16384
 353 0024 5161     		str	r1, [r2, #20]
ARM GAS  /tmp/ccTYfmhp.s 			page 12


 295:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_14;
 354              		.loc 1 295 0
 355 0026 0B43     		orrs	r3, r3, r1
 356              	.LVL13:
 357              	.L28:
 296:src/stm32f1xx_it.c ****   }
 297:src/stm32f1xx_it.c **** 
 298:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 358              		.loc 1 298 0
 359 0028 174A     		ldr	r2, .L36
 360 002a 5269     		ldr	r2, [r2, #20]
 361 002c 12F4005F 		tst	r2, #8192
 362 0030 04D0     		beq	.L29
 299:src/stm32f1xx_it.c ****   {
 300:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 301:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 363              		.loc 1 301 0
 364 0032 154A     		ldr	r2, .L36
 365 0034 4FF40051 		mov	r1, #8192
 366 0038 5161     		str	r1, [r2, #20]
 302:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_13;
 367              		.loc 1 302 0
 368 003a 0B43     		orrs	r3, r3, r1
 369              	.LVL14:
 370              	.L29:
 303:src/stm32f1xx_it.c ****   }
 304:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_12) != RESET)
 371              		.loc 1 304 0
 372 003c 124A     		ldr	r2, .L36
 373 003e 5269     		ldr	r2, [r2, #20]
 374 0040 12F4805F 		tst	r2, #4096
 375 0044 04D0     		beq	.L30
 305:src/stm32f1xx_it.c ****   {
 306:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 307:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 376              		.loc 1 307 0
 377 0046 104A     		ldr	r2, .L36
 378 0048 4FF48051 		mov	r1, #4096
 379 004c 5161     		str	r1, [r2, #20]
 308:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_12;
 380              		.loc 1 308 0
 381 004e 0B43     		orrs	r3, r3, r1
 382              	.LVL15:
 383              	.L30:
 309:src/stm32f1xx_it.c ****   }
 310:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_11) != RESET)
 384              		.loc 1 310 0
 385 0050 0D4A     		ldr	r2, .L36
 386 0052 5269     		ldr	r2, [r2, #20]
 387 0054 12F4006F 		tst	r2, #2048
 388 0058 04D0     		beq	.L31
 311:src/stm32f1xx_it.c ****   {
 312:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 313:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 389              		.loc 1 313 0
 390 005a 0B4A     		ldr	r2, .L36
 391 005c 4FF40061 		mov	r1, #2048
ARM GAS  /tmp/ccTYfmhp.s 			page 13


 392 0060 5161     		str	r1, [r2, #20]
 314:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_11;
 393              		.loc 1 314 0
 394 0062 0B43     		orrs	r3, r3, r1
 395              	.LVL16:
 396              	.L31:
 315:src/stm32f1xx_it.c ****   }
 316:src/stm32f1xx_it.c ****   if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10) != RESET)
 397              		.loc 1 316 0
 398 0064 084A     		ldr	r2, .L36
 399 0066 5269     		ldr	r2, [r2, #20]
 400 0068 12F4806F 		tst	r2, #1024
 401 006c 04D0     		beq	.L32
 317:src/stm32f1xx_it.c ****   {
 318:src/stm32f1xx_it.c ****     /* Clear the EXTI line 13 pending bit */
 319:src/stm32f1xx_it.c ****     __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 402              		.loc 1 319 0
 403 006e 064A     		ldr	r2, .L36
 404 0070 4FF48061 		mov	r1, #1024
 405 0074 5161     		str	r1, [r2, #20]
 320:src/stm32f1xx_it.c ****     triggered |= GPIO_PIN_10;
 406              		.loc 1 320 0
 407 0076 0B43     		orrs	r3, r3, r1
 408              	.LVL17:
 409              	.L32:
 321:src/stm32f1xx_it.c ****   }
 322:src/stm32f1xx_it.c **** 
 323:src/stm32f1xx_it.c **** #ifdef HALL_INTERRUPTS
 324:src/stm32f1xx_it.c ****   if (triggered & HALL_PIN_MASK)
 410              		.loc 1 324 0
 411 0078 13F4E75F 		tst	r3, #7392
 412 007c 00D1     		bne	.L35
 413              	.LVL18:
 414              	.L26:
 325:src/stm32f1xx_it.c ****     HallInterruptsInterrupt();
 326:src/stm32f1xx_it.c **** #endif
 327:src/stm32f1xx_it.c **** }
 415              		.loc 1 327 0
 416 007e 08BD     		pop	{r3, pc}
 417              	.LVL19:
 418              	.L35:
 325:src/stm32f1xx_it.c ****     HallInterruptsInterrupt();
 419              		.loc 1 325 0
 420 0080 FFF7FEFF 		bl	HallInterruptsInterrupt
 421              	.LVL20:
 422              		.loc 1 327 0
 423 0084 FBE7     		b	.L26
 424              	.L37:
 425 0086 00BF     		.align	2
 426              	.L36:
 427 0088 00040140 		.word	1073808384
 428              		.cfi_endproc
 429              	.LFE76:
 431              		.section	.text.DMA1_Channel6_IRQHandler,"ax",%progbits
 432              		.align	1
 433              		.global	DMA1_Channel6_IRQHandler
 434              		.syntax unified
ARM GAS  /tmp/ccTYfmhp.s 			page 14


 435              		.thumb
 436              		.thumb_func
 437              		.fpu softvfp
 439              	DMA1_Channel6_IRQHandler:
 440              	.LFB77:
 328:src/stm32f1xx_it.c **** // end EXTI
 329:src/stm32f1xx_it.c **** /////////////////////////////////////////
 330:src/stm32f1xx_it.c **** // UART interrupts
 331:src/stm32f1xx_it.c **** 
 332:src/stm32f1xx_it.c **** #if defined(SERIAL_USART2_IT)
 333:src/stm32f1xx_it.c **** void USART2_IT_IRQ(USART_TypeDef *us);
 334:src/stm32f1xx_it.c **** 
 335:src/stm32f1xx_it.c **** void USART2_IRQHandler(void){
 336:src/stm32f1xx_it.c ****     USART2_IT_IRQ(USART2);
 337:src/stm32f1xx_it.c **** }
 338:src/stm32f1xx_it.c **** #endif
 339:src/stm32f1xx_it.c **** 
 340:src/stm32f1xx_it.c **** #if defined(SERIAL_USART3_IT)
 341:src/stm32f1xx_it.c **** void USART3_IT_IRQ(USART_TypeDef *us);
 342:src/stm32f1xx_it.c **** 
 343:src/stm32f1xx_it.c **** void USART3_IRQHandler(void){
 344:src/stm32f1xx_it.c ****     USART3_IT_IRQ(USART3);
 345:src/stm32f1xx_it.c **** }
 346:src/stm32f1xx_it.c **** #endif
 347:src/stm32f1xx_it.c **** //
 348:src/stm32f1xx_it.c **** ////////////////////////////////////////
 349:src/stm32f1xx_it.c **** 
 350:src/stm32f1xx_it.c **** #ifdef CONTROL_SERIAL_NAIVE_USART2
 351:src/stm32f1xx_it.c **** void DMA1_Channel6_IRQHandler(void)
 352:src/stm32f1xx_it.c **** {
 441              		.loc 1 352 0
 442              		.cfi_startproc
 443              		@ args = 0, pretend = 0, frame = 0
 444              		@ frame_needed = 0, uses_anonymous_args = 0
 445 0000 08B5     		push	{r3, lr}
 446              	.LCFI3:
 447              		.cfi_def_cfa_offset 8
 448              		.cfi_offset 3, -8
 449              		.cfi_offset 14, -4
 353:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
 354:src/stm32f1xx_it.c **** 
 355:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 0 */
 356:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_rx);
 450              		.loc 1 356 0
 451 0002 0248     		ldr	r0, .L40
 452 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 453              	.LVL21:
 357:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */
 358:src/stm32f1xx_it.c **** 
 359:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel4_IRQn 1 */
 360:src/stm32f1xx_it.c **** }
 454              		.loc 1 360 0
 455 0008 08BD     		pop	{r3, pc}
 456              	.L41:
 457 000a 00BF     		.align	2
 458              	.L40:
 459 000c 00000000 		.word	hdma_usart2_rx
ARM GAS  /tmp/ccTYfmhp.s 			page 15


 460              		.cfi_endproc
 461              	.LFE77:
 463              		.section	.text.DMA1_Channel7_IRQHandler,"ax",%progbits
 464              		.align	1
 465              		.global	DMA1_Channel7_IRQHandler
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu softvfp
 471              	DMA1_Channel7_IRQHandler:
 472              	.LFB78:
 361:src/stm32f1xx_it.c **** 
 362:src/stm32f1xx_it.c **** /**
 363:src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel5 global interrupt.
 364:src/stm32f1xx_it.c **** */
 365:src/stm32f1xx_it.c **** void DMA1_Channel7_IRQHandler(void)
 366:src/stm32f1xx_it.c **** {
 473              		.loc 1 366 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477 0000 08B5     		push	{r3, lr}
 478              	.LCFI4:
 479              		.cfi_def_cfa_offset 8
 480              		.cfi_offset 3, -8
 481              		.cfi_offset 14, -4
 367:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
 368:src/stm32f1xx_it.c **** 
 369:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 0 */
 370:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart2_tx);
 482              		.loc 1 370 0
 483 0002 0248     		ldr	r0, .L44
 484 0004 FFF7FEFF 		bl	HAL_DMA_IRQHandler
 485              	.LVL22:
 371:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */
 372:src/stm32f1xx_it.c **** 
 373:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel5_IRQn 1 */
 374:src/stm32f1xx_it.c **** }
 486              		.loc 1 374 0
 487 0008 08BD     		pop	{r3, pc}
 488              	.L45:
 489 000a 00BF     		.align	2
 490              	.L44:
 491 000c 00000000 		.word	hdma_usart2_tx
 492              		.cfi_endproc
 493              	.LFE78:
 495              		.section	.text.TIM3_IRQHandler,"ax",%progbits
 496              		.align	1
 497              		.global	TIM3_IRQHandler
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 501              		.fpu softvfp
 503              	TIM3_IRQHandler:
 504              	.LFB79:
 375:src/stm32f1xx_it.c **** #endif
 376:src/stm32f1xx_it.c **** 
ARM GAS  /tmp/ccTYfmhp.s 			page 16


 377:src/stm32f1xx_it.c **** 
 378:src/stm32f1xx_it.c **** #ifdef CONTROL_SERIAL_NAIVE_USART3
 379:src/stm32f1xx_it.c **** /**
 380:src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel3 global interrupt.
 381:src/stm32f1xx_it.c **** */
 382:src/stm32f1xx_it.c **** void DMA1_Channel3_IRQHandler(void)
 383:src/stm32f1xx_it.c **** {
 384:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */
 385:src/stm32f1xx_it.c **** 
 386:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 0 */
 387:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_rx);
 388:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
 389:src/stm32f1xx_it.c **** 
 390:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel3_IRQn 1 */
 391:src/stm32f1xx_it.c **** }
 392:src/stm32f1xx_it.c **** 
 393:src/stm32f1xx_it.c **** /**
 394:src/stm32f1xx_it.c **** * @brief This function handles DMA1 channel2 global interrupt.
 395:src/stm32f1xx_it.c **** */
 396:src/stm32f1xx_it.c **** void DMA1_Channel2_IRQHandler(void)
 397:src/stm32f1xx_it.c **** {
 398:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */
 399:src/stm32f1xx_it.c **** 
 400:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 0 */
 401:src/stm32f1xx_it.c ****   HAL_DMA_IRQHandler(&hdma_usart3_tx);
 402:src/stm32f1xx_it.c ****   /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */
 403:src/stm32f1xx_it.c **** 
 404:src/stm32f1xx_it.c ****   /* USER CODE END DMA1_Channel2_IRQn 1 */
 405:src/stm32f1xx_it.c **** }
 406:src/stm32f1xx_it.c **** #endif
 407:src/stm32f1xx_it.c **** 
 408:src/stm32f1xx_it.c **** /******************************************************************************/
 409:src/stm32f1xx_it.c **** /* STM32F1xx Peripheral Interrupt Handlers                                    */
 410:src/stm32f1xx_it.c **** /* Add here the Interrupt Handlers for the used peripherals.                  */
 411:src/stm32f1xx_it.c **** /* For the available peripheral interrupt handler names,                      */
 412:src/stm32f1xx_it.c **** /* please refer to the startup file (startup_stm32f1xx.s).                    */
 413:src/stm32f1xx_it.c **** /******************************************************************************/
 414:src/stm32f1xx_it.c **** 
 415:src/stm32f1xx_it.c **** 
 416:src/stm32f1xx_it.c **** /**
 417:src/stm32f1xx_it.c **** * @brief This function handles TIM3 global interrupt.
 418:src/stm32f1xx_it.c **** */
 419:src/stm32f1xx_it.c **** void TIM3_IRQHandler(void)
 420:src/stm32f1xx_it.c **** {
 505              		.loc 1 420 0
 506              		.cfi_startproc
 507              		@ args = 0, pretend = 0, frame = 0
 508              		@ frame_needed = 0, uses_anonymous_args = 0
 509 0000 08B5     		push	{r3, lr}
 510              	.LCFI5:
 511              		.cfi_def_cfa_offset 8
 512              		.cfi_offset 3, -8
 513              		.cfi_offset 14, -4
 421:src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 0 */
 422:src/stm32f1xx_it.c **** 
 423:src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 0 */
 424:src/stm32f1xx_it.c ****   HAL_TIM_IRQHandler(&htim3);
ARM GAS  /tmp/ccTYfmhp.s 			page 17


 514              		.loc 1 424 0
 515 0002 0248     		ldr	r0, .L48
 516 0004 FFF7FEFF 		bl	HAL_TIM_IRQHandler
 517              	.LVL23:
 425:src/stm32f1xx_it.c ****   /* USER CODE BEGIN TIM3_IRQn 1 */
 426:src/stm32f1xx_it.c **** 
 427:src/stm32f1xx_it.c ****   /* USER CODE END TIM3_IRQn 1 */
 428:src/stm32f1xx_it.c **** }
 518              		.loc 1 428 0
 519 0008 08BD     		pop	{r3, pc}
 520              	.L49:
 521 000a 00BF     		.align	2
 522              	.L48:
 523 000c 00000000 		.word	htim3
 524              		.cfi_endproc
 525              	.LFE79:
 527              		.text
 528              	.Letext0:
 529              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 530              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 531              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 532              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 533              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 534              		.file 7 "/usr/arm-none-eabi/include/sys/lock.h"
 535              		.file 8 "/usr/arm-none-eabi/include/sys/_types.h"
 536              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 537              		.file 10 "/usr/arm-none-eabi/include/sys/reent.h"
 538              		.file 11 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 539              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 540              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 541              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 542              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 543              		.file 16 "inc/hallinterrupts.h"
 544              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal.h"
 545              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/ccTYfmhp.s 			page 18


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f1xx_it.c
     /tmp/ccTYfmhp.s:16     .text.NMI_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:23     .text.NMI_Handler:0000000000000000 NMI_Handler
     /tmp/ccTYfmhp.s:37     .text.HardFault_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:44     .text.HardFault_Handler:0000000000000000 HardFault_Handler
     /tmp/ccTYfmhp.s:58     .text.MemManage_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:65     .text.MemManage_Handler:0000000000000000 MemManage_Handler
     /tmp/ccTYfmhp.s:79     .text.BusFault_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:86     .text.BusFault_Handler:0000000000000000 BusFault_Handler
     /tmp/ccTYfmhp.s:100    .text.UsageFault_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:107    .text.UsageFault_Handler:0000000000000000 UsageFault_Handler
     /tmp/ccTYfmhp.s:121    .text.SVC_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:128    .text.SVC_Handler:0000000000000000 SVC_Handler
     /tmp/ccTYfmhp.s:141    .text.DebugMon_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:148    .text.DebugMon_Handler:0000000000000000 DebugMon_Handler
     /tmp/ccTYfmhp.s:161    .text.PendSV_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:168    .text.PendSV_Handler:0000000000000000 PendSV_Handler
     /tmp/ccTYfmhp.s:181    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccTYfmhp.s:188    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccTYfmhp.s:211    .text.EXTI9_5_IRQHandler:0000000000000000 $t
     /tmp/ccTYfmhp.s:218    .text.EXTI9_5_IRQHandler:0000000000000000 EXTI9_5_IRQHandler
     /tmp/ccTYfmhp.s:310    .text.EXTI9_5_IRQHandler:0000000000000070 $d
     /tmp/ccTYfmhp.s:315    .text.EXTI15_10_IRQHandler:0000000000000000 $t
     /tmp/ccTYfmhp.s:322    .text.EXTI15_10_IRQHandler:0000000000000000 EXTI15_10_IRQHandler
     /tmp/ccTYfmhp.s:427    .text.EXTI15_10_IRQHandler:0000000000000088 $d
     /tmp/ccTYfmhp.s:432    .text.DMA1_Channel6_IRQHandler:0000000000000000 $t
     /tmp/ccTYfmhp.s:439    .text.DMA1_Channel6_IRQHandler:0000000000000000 DMA1_Channel6_IRQHandler
     /tmp/ccTYfmhp.s:459    .text.DMA1_Channel6_IRQHandler:000000000000000c $d
     /tmp/ccTYfmhp.s:464    .text.DMA1_Channel7_IRQHandler:0000000000000000 $t
     /tmp/ccTYfmhp.s:471    .text.DMA1_Channel7_IRQHandler:0000000000000000 DMA1_Channel7_IRQHandler
     /tmp/ccTYfmhp.s:491    .text.DMA1_Channel7_IRQHandler:000000000000000c $d
     /tmp/ccTYfmhp.s:496    .text.TIM3_IRQHandler:0000000000000000 $t
     /tmp/ccTYfmhp.s:503    .text.TIM3_IRQHandler:0000000000000000 TIM3_IRQHandler
     /tmp/ccTYfmhp.s:523    .text.TIM3_IRQHandler:000000000000000c $d

UNDEFINED SYMBOLS
HAL_IncTick
HAL_SYSTICK_IRQHandler
HallInterruptsInterrupt
HAL_DMA_IRQHandler
hdma_usart2_rx
hdma_usart2_tx
HAL_TIM_IRQHandler
htim3
