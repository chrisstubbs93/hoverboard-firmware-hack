ARM GAS  /tmp/cc9v2zNu.s 			page 1


   1              		.cpu cortex-m3
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 1
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"setup.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.UART2_Init,"ax",%progbits
  16              		.align	1
  17              		.global	UART2_Init
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu softvfp
  23              	UART2_Init:
  24              	.LFB66:
  25              		.file 1 "src/setup.c"
   1:src/setup.c   **** /*
   2:src/setup.c   **** * This file is part of the hoverboard-firmware-hack project.
   3:src/setup.c   **** *
   4:src/setup.c   **** * Copyright (C) 2017-2018 Rene Hopf <renehopf@mac.com>
   5:src/setup.c   **** * Copyright (C) 2017-2018 Nico Stute <crinq@crinq.de>
   6:src/setup.c   **** * Copyright (C) 2017-2018 Niklas Fauth <niklas.fauth@kit.fail>
   7:src/setup.c   **** *
   8:src/setup.c   **** * This program is free software: you can redistribute it and/or modify
   9:src/setup.c   **** * it under the terms of the GNU General Public License as published by
  10:src/setup.c   **** * the Free Software Foundation, either version 3 of the License, or
  11:src/setup.c   **** * (at your option) any later version.
  12:src/setup.c   **** *
  13:src/setup.c   **** * This program is distributed in the hope that it will be useful,
  14:src/setup.c   **** * but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:src/setup.c   **** * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:src/setup.c   **** * GNU General Public License for more details.
  17:src/setup.c   **** *
  18:src/setup.c   **** * You should have received a copy of the GNU General Public License
  19:src/setup.c   **** * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  20:src/setup.c   **** */
  21:src/setup.c   **** 
  22:src/setup.c   **** /*
  23:src/setup.c   **** tim1 master, enable -> trgo
  24:src/setup.c   **** tim8, gated slave mode, trgo by tim1 trgo. overflow -> trgo
  25:src/setup.c   **** adc1,adc2 triggered by tim8 trgo
  26:src/setup.c   **** adc 1,2 dual mode
  27:src/setup.c   **** 
  28:src/setup.c   **** ADC1             ADC2
  29:src/setup.c   **** R_Blau PC4 CH14  R_Gelb PC5 CH15
  30:src/setup.c   **** L_Gr√ºn PA0 CH01  L_Blau PC3 CH13
  31:src/setup.c   **** R_DC PC1 CH11    L_DC PC0 CH10
  32:src/setup.c   **** BAT   PC2 CH12   L_TX PA2 CH02
  33:src/setup.c   **** BAT   PC2 CH12   L_RX PA3 CH03
ARM GAS  /tmp/cc9v2zNu.s 			page 2


  34:src/setup.c   **** 
  35:src/setup.c   **** pb10 usart3 dma1 channel2/3
  36:src/setup.c   **** */
  37:src/setup.c   **** 
  38:src/setup.c   **** #include "defines.h"
  39:src/setup.c   **** #include "config.h"
  40:src/setup.c   **** #include "comms.h"
  41:src/setup.c   **** #include <string.h> /* memset */
  42:src/setup.c   **** 
  43:src/setup.c   **** TIM_HandleTypeDef htim_right;
  44:src/setup.c   **** TIM_HandleTypeDef htim_left;
  45:src/setup.c   **** TIM_HandleTypeDef htim3;
  46:src/setup.c   **** ADC_HandleTypeDef hadc1;
  47:src/setup.c   **** ADC_HandleTypeDef hadc2;
  48:src/setup.c   **** I2C_HandleTypeDef hi2c2;
  49:src/setup.c   **** UART_HandleTypeDef huart2;
  50:src/setup.c   **** UART_HandleTypeDef huart3;
  51:src/setup.c   **** 
  52:src/setup.c   **** DMA_HandleTypeDef hdma_usart2_rx;
  53:src/setup.c   **** DMA_HandleTypeDef hdma_usart2_tx;
  54:src/setup.c   **** DMA_HandleTypeDef hdma_usart3_rx;
  55:src/setup.c   **** DMA_HandleTypeDef hdma_usart3_tx;
  56:src/setup.c   **** volatile adc_buf_t adc_buffer;
  57:src/setup.c   **** 
  58:src/setup.c   **** 
  59:src/setup.c   **** 
  60:src/setup.c   **** 
  61:src/setup.c   **** 
  62:src/setup.c   **** #if defined(CONTROL_SERIAL_NAIVE_USART2) || defined(DEBUG_SERIAL_USART2)
  63:src/setup.c   **** void UART2_Init() {
  26              		.loc 1 63 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  31              	.LCFI0:
  32              		.cfi_def_cfa_offset 24
  33              		.cfi_offset 4, -24
  34              		.cfi_offset 5, -20
  35              		.cfi_offset 6, -16
  36              		.cfi_offset 7, -12
  37              		.cfi_offset 8, -8
  38              		.cfi_offset 14, -4
  39 0004 88B0     		sub	sp, sp, #32
  40              	.LCFI1:
  41              		.cfi_def_cfa_offset 56
  64:src/setup.c   **** 
  65:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART2
  66:src/setup.c   ****   /* DMA1_Channel6_IRQn interrupt configuration */
  67:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 6);
  42              		.loc 1 67 0
  43 0006 0622     		movs	r2, #6
  44 0008 0521     		movs	r1, #5
  45 000a 1020     		movs	r0, #16
  46 000c FFF7FEFF 		bl	HAL_NVIC_SetPriority
  47              	.LVL0:
  68:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
ARM GAS  /tmp/cc9v2zNu.s 			page 3


  48              		.loc 1 68 0
  49 0010 1020     		movs	r0, #16
  50 0012 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  51              	.LVL1:
  69:src/setup.c   ****   /* DMA1_Channel7_IRQn interrupt configuration */
  70:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 7);
  52              		.loc 1 70 0
  53 0016 0722     		movs	r2, #7
  54 0018 0521     		movs	r1, #5
  55 001a 1120     		movs	r0, #17
  56 001c FFF7FEFF 		bl	HAL_NVIC_SetPriority
  57              	.LVL2:
  71:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
  58              		.loc 1 71 0
  59 0020 1120     		movs	r0, #17
  60 0022 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
  61              	.LVL3:
  62              	.LBB2:
  72:src/setup.c   **** #endif
  73:src/setup.c   **** 
  74:src/setup.c   ****   __HAL_RCC_DMA1_CLK_ENABLE();
  63              		.loc 1 74 0
  64 0026 3A4B     		ldr	r3, .L3
  65 0028 5A69     		ldr	r2, [r3, #20]
  66 002a 42F00102 		orr	r2, r2, #1
  67 002e 5A61     		str	r2, [r3, #20]
  68 0030 5A69     		ldr	r2, [r3, #20]
  69 0032 02F00102 		and	r2, r2, #1
  70 0036 0192     		str	r2, [sp, #4]
  71 0038 019A     		ldr	r2, [sp, #4]
  72              	.LBE2:
  73              	.LBB3:
  75:src/setup.c   ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  74              		.loc 1 75 0
  75 003a 9A69     		ldr	r2, [r3, #24]
  76 003c 42F00402 		orr	r2, r2, #4
  77 0040 9A61     		str	r2, [r3, #24]
  78 0042 9A69     		ldr	r2, [r3, #24]
  79 0044 02F00402 		and	r2, r2, #4
  80 0048 0292     		str	r2, [sp, #8]
  81 004a 029A     		ldr	r2, [sp, #8]
  82              	.LBE3:
  83              	.LBB4:
  76:src/setup.c   ****   __HAL_RCC_USART2_CLK_ENABLE();
  84              		.loc 1 76 0
  85 004c DA69     		ldr	r2, [r3, #28]
  86 004e 42F40032 		orr	r2, r2, #131072
  87 0052 DA61     		str	r2, [r3, #28]
  88 0054 DB69     		ldr	r3, [r3, #28]
  89 0056 03F40033 		and	r3, r3, #131072
  90 005a 0393     		str	r3, [sp, #12]
  91 005c 039B     		ldr	r3, [sp, #12]
  92              	.LBE4:
  77:src/setup.c   **** 
  78:src/setup.c   ****   huart2.Instance          = USART2;
  93              		.loc 1 78 0
  94 005e 2D4D     		ldr	r5, .L3+4
ARM GAS  /tmp/cc9v2zNu.s 			page 4


  95 0060 2D4E     		ldr	r6, .L3+8
  96 0062 2E60     		str	r6, [r5]
  79:src/setup.c   ****   huart2.Init.BaudRate     = USART2_BAUD;
  97              		.loc 1 79 0
  98 0064 4FF41653 		mov	r3, #9600
  99 0068 6B60     		str	r3, [r5, #4]
  80:src/setup.c   ****   huart2.Init.WordLength   = UART_WORDLENGTH_8B;
 100              		.loc 1 80 0
 101 006a 0024     		movs	r4, #0
 102 006c AC60     		str	r4, [r5, #8]
  81:src/setup.c   ****   huart2.Init.StopBits     = UART_STOPBITS_1;
 103              		.loc 1 81 0
 104 006e EC60     		str	r4, [r5, #12]
  82:src/setup.c   ****   huart2.Init.Parity       = UART_PARITY_NONE;
 105              		.loc 1 82 0
 106 0070 2C61     		str	r4, [r5, #16]
  83:src/setup.c   ****   huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 107              		.loc 1 83 0
 108 0072 AC61     		str	r4, [r5, #24]
  84:src/setup.c   ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 109              		.loc 1 84 0
 110 0074 EC61     		str	r4, [r5, #28]
  85:src/setup.c   **** #if defined(CONTROL_SERIAL_NAIVE_USART2)
  86:src/setup.c   ****   huart2.Init.Mode         = UART_MODE_TX_RX;
 111              		.loc 1 86 0
 112 0076 0C23     		movs	r3, #12
 113 0078 6B61     		str	r3, [r5, #20]
  87:src/setup.c   **** #elif defined(DEBUG_SERIAL_USART2)
  88:src/setup.c   ****   huart2.Init.Mode         = UART_MODE_TX;
  89:src/setup.c   **** #endif
  90:src/setup.c   ****   HAL_UART_Init(&huart2);
 114              		.loc 1 90 0
 115 007a 2846     		mov	r0, r5
 116 007c FFF7FEFF 		bl	HAL_UART_Init
 117              	.LVL4:
  91:src/setup.c   **** 
  92:src/setup.c   **** #ifdef DEBUG_SERIAL_USART2
  93:src/setup.c   ****   USART2->CR3 |= USART_CR3_DMAT;  // | USART_CR3_DMAR | USART_CR3_OVRDIS;
 118              		.loc 1 93 0
 119 0080 7369     		ldr	r3, [r6, #20]
 120 0082 43F08003 		orr	r3, r3, #128
 121 0086 7361     		str	r3, [r6, #20]
  94:src/setup.c   **** #endif
  95:src/setup.c   **** 
  96:src/setup.c   ****   GPIO_InitTypeDef GPIO_InitStruct;
  97:src/setup.c   ****   GPIO_InitStruct.Pull  = GPIO_PULLUP;
 122              		.loc 1 97 0
 123 0088 0123     		movs	r3, #1
 124 008a 0693     		str	r3, [sp, #24]
  98:src/setup.c   ****   GPIO_InitStruct.Pin   = GPIO_PIN_2;
 125              		.loc 1 98 0
 126 008c 0423     		movs	r3, #4
 127 008e 0493     		str	r3, [sp, #16]
  99:src/setup.c   ****   GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 128              		.loc 1 99 0
 129 0090 0223     		movs	r3, #2
 130 0092 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/cc9v2zNu.s 			page 5


 100:src/setup.c   ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 131              		.loc 1 100 0
 132 0094 0323     		movs	r3, #3
 133 0096 0793     		str	r3, [sp, #28]
 101:src/setup.c   ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 134              		.loc 1 101 0
 135 0098 06F54446 		add	r6, r6, #50176
 136 009c 04A9     		add	r1, sp, #16
 137 009e 3046     		mov	r0, r6
 138 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 139              	.LVL5:
 102:src/setup.c   **** 
 103:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART2
 104:src/setup.c   ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 140              		.loc 1 104 0
 141 00a4 0823     		movs	r3, #8
 142 00a6 0493     		str	r3, [sp, #16]
 105:src/setup.c   ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 143              		.loc 1 105 0
 144 00a8 0594     		str	r4, [sp, #20]
 106:src/setup.c   ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 145              		.loc 1 106 0
 146 00aa 04A9     		add	r1, sp, #16
 147 00ac 3046     		mov	r0, r6
 148 00ae FFF7FEFF 		bl	HAL_GPIO_Init
 149              	.LVL6:
 107:src/setup.c   **** 
 108:src/setup.c   ****   /* Peripheral DMA init*/
 109:src/setup.c   **** 
 110:src/setup.c   ****   hdma_usart2_rx.Instance = DMA1_Channel6;
 150              		.loc 1 110 0
 151 00b2 1A4E     		ldr	r6, .L3+12
 152 00b4 1A4B     		ldr	r3, .L3+16
 153 00b6 3360     		str	r3, [r6]
 111:src/setup.c   ****   hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 154              		.loc 1 111 0
 155 00b8 7460     		str	r4, [r6, #4]
 112:src/setup.c   ****   hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 156              		.loc 1 112 0
 157 00ba B460     		str	r4, [r6, #8]
 113:src/setup.c   ****   hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 158              		.loc 1 113 0
 159 00bc 4FF08008 		mov	r8, #128
 160 00c0 C6F80C80 		str	r8, [r6, #12]
 114:src/setup.c   ****   hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 161              		.loc 1 114 0
 162 00c4 3461     		str	r4, [r6, #16]
 115:src/setup.c   ****   hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 163              		.loc 1 115 0
 164 00c6 7461     		str	r4, [r6, #20]
 116:src/setup.c   ****   hdma_usart2_rx.Init.Mode = DMA_CIRCULAR; //DMA_NORMAL;
 165              		.loc 1 116 0
 166 00c8 2023     		movs	r3, #32
 167 00ca B361     		str	r3, [r6, #24]
 117:src/setup.c   ****   hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 168              		.loc 1 117 0
 169 00cc F461     		str	r4, [r6, #28]
ARM GAS  /tmp/cc9v2zNu.s 			page 6


 118:src/setup.c   ****   HAL_DMA_Init(&hdma_usart2_rx);
 170              		.loc 1 118 0
 171 00ce 3046     		mov	r0, r6
 172 00d0 FFF7FEFF 		bl	HAL_DMA_Init
 173              	.LVL7:
 119:src/setup.c   ****   __HAL_LINKDMA(&huart2,hdmarx,hdma_usart2_rx);
 174              		.loc 1 119 0
 175 00d4 6E63     		str	r6, [r5, #52]
 176 00d6 7562     		str	r5, [r6, #36]
 120:src/setup.c   **** #endif
 121:src/setup.c   **** 
 122:src/setup.c   ****   hdma_usart2_tx.Instance = DMA1_Channel7;
 177              		.loc 1 122 0
 178 00d8 124E     		ldr	r6, .L3+20
 179 00da 134F     		ldr	r7, .L3+24
 180 00dc 3760     		str	r7, [r6]
 123:src/setup.c   ****   hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 181              		.loc 1 123 0
 182 00de 1023     		movs	r3, #16
 183 00e0 7360     		str	r3, [r6, #4]
 124:src/setup.c   ****   hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 184              		.loc 1 124 0
 185 00e2 B460     		str	r4, [r6, #8]
 125:src/setup.c   ****   hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 186              		.loc 1 125 0
 187 00e4 C6F80C80 		str	r8, [r6, #12]
 126:src/setup.c   ****   hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 188              		.loc 1 126 0
 189 00e8 3461     		str	r4, [r6, #16]
 127:src/setup.c   ****   hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 190              		.loc 1 127 0
 191 00ea 7461     		str	r4, [r6, #20]
 128:src/setup.c   ****   hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 192              		.loc 1 128 0
 193 00ec B461     		str	r4, [r6, #24]
 129:src/setup.c   ****   hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 194              		.loc 1 129 0
 195 00ee F461     		str	r4, [r6, #28]
 130:src/setup.c   ****   HAL_DMA_Init(&hdma_usart2_tx);
 196              		.loc 1 130 0
 197 00f0 3046     		mov	r0, r6
 198 00f2 FFF7FEFF 		bl	HAL_DMA_Init
 199              	.LVL8:
 131:src/setup.c   **** 
 132:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART2
 133:src/setup.c   ****   __HAL_LINKDMA(&huart2,hdmatx,hdma_usart2_tx);
 200              		.loc 1 133 0
 201 00f6 2E63     		str	r6, [r5, #48]
 202 00f8 7562     		str	r5, [r6, #36]
 134:src/setup.c   **** #endif
 135:src/setup.c   **** #ifdef DEBUG_SERIAL_USART2
 136:src/setup.c   ****   DMA1_Channel7->CPAR  = (uint32_t) & (USART2->DR);
 203              		.loc 1 136 0
 204 00fa 0C4B     		ldr	r3, .L3+28
 205 00fc BB60     		str	r3, [r7, #8]
 137:src/setup.c   ****   DMA1_Channel7->CNDTR = 0;
 206              		.loc 1 137 0
ARM GAS  /tmp/cc9v2zNu.s 			page 7


 207 00fe 7C60     		str	r4, [r7, #4]
 138:src/setup.c   ****   DMA1->IFCR           = DMA_IFCR_CTCIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CGIF7;
 208              		.loc 1 138 0
 209 0100 0B4B     		ldr	r3, .L3+32
 210 0102 4FF0E062 		mov	r2, #117440512
 211 0106 5A60     		str	r2, [r3, #4]
 139:src/setup.c   **** #endif
 140:src/setup.c   **** }
 212              		.loc 1 140 0
 213 0108 08B0     		add	sp, sp, #32
 214              	.LCFI2:
 215              		.cfi_def_cfa_offset 24
 216              		@ sp needed
 217 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 218              	.L4:
 219 010e 00BF     		.align	2
 220              	.L3:
 221 0110 00100240 		.word	1073876992
 222 0114 00000000 		.word	huart2
 223 0118 00440040 		.word	1073759232
 224 011c 00000000 		.word	hdma_usart2_rx
 225 0120 6C000240 		.word	1073873004
 226 0124 00000000 		.word	hdma_usart2_tx
 227 0128 80000240 		.word	1073873024
 228 012c 04440040 		.word	1073759236
 229 0130 00000240 		.word	1073872896
 230              		.cfi_endproc
 231              	.LFE66:
 233              		.section	.text.I2C_Init,"ax",%progbits
 234              		.align	1
 235              		.global	I2C_Init
 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu softvfp
 241              	I2C_Init:
 242              	.LFB67:
 141:src/setup.c   **** #endif
 142:src/setup.c   **** 
 143:src/setup.c   **** #if defined(CONTROL_SERIAL_NAIVE_USART3) || defined(DEBUG_SERIAL_USART3)
 144:src/setup.c   **** void UART3_Init() {
 145:src/setup.c   **** 
 146:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART3
 147:src/setup.c   ****   /* DMA1_Channel3_IRQn interrupt configuration */
 148:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 3);
 149:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 150:src/setup.c   ****   /* DMA1_Channel2_IRQn interrupt configuration */
 151:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 2);
 152:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 153:src/setup.c   **** #endif
 154:src/setup.c   **** 
 155:src/setup.c   ****   __HAL_RCC_DMA1_CLK_ENABLE();
 156:src/setup.c   ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 157:src/setup.c   ****   __HAL_RCC_USART3_CLK_ENABLE();
 158:src/setup.c   **** 
 159:src/setup.c   ****   huart3.Instance          = USART3;
 160:src/setup.c   ****   huart3.Init.BaudRate     = USART3_BAUD;
ARM GAS  /tmp/cc9v2zNu.s 			page 8


 161:src/setup.c   ****   huart3.Init.WordLength   = UART_WORDLENGTH_8B;
 162:src/setup.c   ****   huart3.Init.StopBits     = UART_STOPBITS_1;
 163:src/setup.c   ****   huart3.Init.Parity       = UART_PARITY_NONE;
 164:src/setup.c   ****   huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 165:src/setup.c   ****   huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 166:src/setup.c   **** #if defined(CONTROL_SERIAL_NAIVE_USART3)
 167:src/setup.c   ****   huart3.Init.Mode         = UART_MODE_TX_RX;
 168:src/setup.c   **** #elif defined(DEBUG_SERIAL_USART3)
 169:src/setup.c   ****   huart3.Init.Mode         = UART_MODE_TX;
 170:src/setup.c   **** #endif
 171:src/setup.c   ****   HAL_UART_Init(&huart3);
 172:src/setup.c   **** 
 173:src/setup.c   **** #ifdef DEBUG_SERIAL_USART3
 174:src/setup.c   ****   USART3->CR3 |= USART_CR3_DMAT;  // | USART_CR3_DMAR | USART_CR3_OVRDIS;
 175:src/setup.c   **** #endif
 176:src/setup.c   **** 
 177:src/setup.c   ****   GPIO_InitTypeDef GPIO_InitStruct;
 178:src/setup.c   ****   GPIO_InitStruct.Pull  = GPIO_PULLUP;
 179:src/setup.c   ****   GPIO_InitStruct.Pin   = GPIO_PIN_10;
 180:src/setup.c   ****   GPIO_InitStruct.Mode  = GPIO_MODE_AF_PP;
 181:src/setup.c   ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 182:src/setup.c   ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 183:src/setup.c   **** 
 184:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART3
 185:src/setup.c   ****   GPIO_InitStruct.Pin = GPIO_PIN_11;
 186:src/setup.c   ****   GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 187:src/setup.c   ****   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 188:src/setup.c   **** 
 189:src/setup.c   ****   /* Peripheral DMA init*/
 190:src/setup.c   **** 
 191:src/setup.c   ****   hdma_usart3_rx.Instance = DMA1_Channel3;
 192:src/setup.c   ****   hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 193:src/setup.c   ****   hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 194:src/setup.c   ****   hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 195:src/setup.c   ****   hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 196:src/setup.c   ****   hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 197:src/setup.c   ****   hdma_usart3_rx.Init.Mode = DMA_CIRCULAR; //DMA_NORMAL;
 198:src/setup.c   ****   hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 199:src/setup.c   ****   HAL_DMA_Init(&hdma_usart3_rx);
 200:src/setup.c   ****   __HAL_LINKDMA(&huart3,hdmarx,hdma_usart3_rx);
 201:src/setup.c   **** #endif
 202:src/setup.c   **** 
 203:src/setup.c   ****   hdma_usart3_tx.Instance = DMA1_Channel2;
 204:src/setup.c   ****   hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 205:src/setup.c   ****   hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 206:src/setup.c   ****   hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 207:src/setup.c   ****   hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 208:src/setup.c   ****   hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 209:src/setup.c   ****   hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 210:src/setup.c   ****   hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 211:src/setup.c   ****   HAL_DMA_Init(&hdma_usart3_tx);
 212:src/setup.c   **** 
 213:src/setup.c   **** #ifdef CONTROL_SERIAL_NAIVE_USART3
 214:src/setup.c   ****   __HAL_LINKDMA(&huart3,hdmatx,hdma_usart3_tx);
 215:src/setup.c   **** #endif
 216:src/setup.c   **** #ifdef DEBUG_SERIAL_USART3
 217:src/setup.c   ****   DMA1_Channel2->CPAR  = (uint32_t) & (USART3->DR);
ARM GAS  /tmp/cc9v2zNu.s 			page 9


 218:src/setup.c   ****   DMA1_Channel2->CNDTR = 0;
 219:src/setup.c   ****   DMA1->IFCR           = DMA_IFCR_CTCIF2 | DMA_IFCR_CHTIF2 | DMA_IFCR_CGIF2;
 220:src/setup.c   **** #endif
 221:src/setup.c   **** }
 222:src/setup.c   **** #endif
 223:src/setup.c   **** 
 224:src/setup.c   **** #ifdef SERIAL_USART2_IT
 225:src/setup.c   **** 
 226:src/setup.c   **** void USART2_IT_init(){
 227:src/setup.c   ****     memset((void*)&usart2_it_TXbuffer, 0, sizeof(usart2_it_TXbuffer));
 228:src/setup.c   ****     memset((void*)&usart2_it_RXbuffer, 0, sizeof(usart2_it_RXbuffer));
 229:src/setup.c   **** 
 230:src/setup.c   ****     memset(&huart2, 0, sizeof(huart2));
 231:src/setup.c   ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 232:src/setup.c   ****     __HAL_RCC_USART2_CLK_ENABLE();
 233:src/setup.c   **** 
 234:src/setup.c   ****     huart2.Instance          = USART2;
 235:src/setup.c   ****     huart2.Init.BaudRate     = USART2_BAUD;
 236:src/setup.c   ****     huart2.Init.WordLength   = USART2_WORDLENGTH;
 237:src/setup.c   ****     huart2.Init.StopBits     = UART_STOPBITS_1;
 238:src/setup.c   ****     huart2.Init.Parity       = UART_PARITY_NONE;
 239:src/setup.c   ****     huart2.Init.Mode         = UART_MODE_TX_RX;
 240:src/setup.c   ****     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 241:src/setup.c   ****     huart2.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 242:src/setup.c   ****     HAL_UART_Init(&huart2);
 243:src/setup.c   **** 
 244:src/setup.c   ****     GPIO_InitTypeDef GPIO_InitStruct;
 245:src/setup.c   ****     memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 246:src/setup.c   ****     GPIO_InitStruct.Pin      = GPIO_PIN_2;
 247:src/setup.c   ****     GPIO_InitStruct.Pull     = GPIO_PULLUP;
 248:src/setup.c   ****     GPIO_InitStruct.Mode     = GPIO_MODE_AF_PP;
 249:src/setup.c   ****     GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 250:src/setup.c   ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 251:src/setup.c   **** 
 252:src/setup.c   ****     memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 253:src/setup.c   ****     GPIO_InitStruct.Pin      = GPIO_PIN_3;
 254:src/setup.c   ****     GPIO_InitStruct.Pull     = GPIO_NOPULL;
 255:src/setup.c   ****     GPIO_InitStruct.Mode     = GPIO_MODE_INPUT;
 256:src/setup.c   ****     GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 257:src/setup.c   ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 258:src/setup.c   **** 
 259:src/setup.c   ****     // start interrupt receive?
 260:src/setup.c   ****     HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 261:src/setup.c   ****     HAL_NVIC_EnableIRQ(USART2_IRQn);
 262:src/setup.c   **** 
 263:src/setup.c   ****     __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 264:src/setup.c   **** }
 265:src/setup.c   **** #endif
 266:src/setup.c   **** 
 267:src/setup.c   **** #ifdef SERIAL_USART3_IT
 268:src/setup.c   **** void USART3_IT_init(){
 269:src/setup.c   ****     memset((void *)&usart3_it_TXbuffer, 0, sizeof(usart3_it_TXbuffer));
 270:src/setup.c   ****     memset((void *)&usart3_it_RXbuffer, 0, sizeof(usart3_it_RXbuffer));
 271:src/setup.c   **** 
 272:src/setup.c   ****     memset(&huart3, 0, sizeof(huart3));
 273:src/setup.c   ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 274:src/setup.c   ****     __HAL_RCC_USART3_CLK_ENABLE();
ARM GAS  /tmp/cc9v2zNu.s 			page 10


 275:src/setup.c   **** 
 276:src/setup.c   ****     huart3.Instance          = USART3;
 277:src/setup.c   ****     huart3.Init.BaudRate     = USART3_BAUD;
 278:src/setup.c   ****     huart3.Init.WordLength   = USART3_WORDLENGTH;
 279:src/setup.c   ****     huart3.Init.StopBits     = UART_STOPBITS_1;
 280:src/setup.c   ****     huart3.Init.Parity       = UART_PARITY_NONE;
 281:src/setup.c   ****     huart3.Init.Mode         = UART_MODE_TX_RX;
 282:src/setup.c   ****     huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 283:src/setup.c   ****     huart3.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 284:src/setup.c   ****     HAL_UART_Init(&huart3);
 285:src/setup.c   **** 
 286:src/setup.c   ****     GPIO_InitTypeDef GPIO_InitStruct;
 287:src/setup.c   ****     memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 288:src/setup.c   ****     GPIO_InitStruct.Pin      = GPIO_PIN_10;
 289:src/setup.c   ****     GPIO_InitStruct.Pull     = GPIO_PULLUP;
 290:src/setup.c   ****     GPIO_InitStruct.Mode     = GPIO_MODE_AF_PP;
 291:src/setup.c   ****     GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 292:src/setup.c   ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 293:src/setup.c   **** 
 294:src/setup.c   ****     memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 295:src/setup.c   ****     GPIO_InitStruct.Pin      = GPIO_PIN_11;
 296:src/setup.c   ****     GPIO_InitStruct.Pull     = GPIO_NOPULL;
 297:src/setup.c   ****     GPIO_InitStruct.Mode     = GPIO_MODE_INPUT;
 298:src/setup.c   ****     GPIO_InitStruct.Speed    = GPIO_SPEED_FREQ_HIGH;
 299:src/setup.c   ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 300:src/setup.c   **** 
 301:src/setup.c   ****     // start interrupt receive?
 302:src/setup.c   ****     HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 303:src/setup.c   ****     HAL_NVIC_EnableIRQ(USART3_IRQn);
 304:src/setup.c   **** 
 305:src/setup.c   ****     __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 306:src/setup.c   **** }
 307:src/setup.c   **** #endif
 308:src/setup.c   **** 
 309:src/setup.c   **** DMA_HandleTypeDef hdma_i2c2_rx;
 310:src/setup.c   **** DMA_HandleTypeDef hdma_i2c2_tx;
 311:src/setup.c   **** 
 312:src/setup.c   **** void I2C_Init()
 313:src/setup.c   **** {
 243              		.loc 1 313 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 40
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 248              	.LCFI3:
 249              		.cfi_def_cfa_offset 24
 250              		.cfi_offset 4, -24
 251              		.cfi_offset 5, -20
 252              		.cfi_offset 6, -16
 253              		.cfi_offset 7, -12
 254              		.cfi_offset 8, -8
 255              		.cfi_offset 14, -4
 256 0004 8AB0     		sub	sp, sp, #40
 257              	.LCFI4:
 258              		.cfi_def_cfa_offset 64
 259              	.LBB5:
 314:src/setup.c   **** 
ARM GAS  /tmp/cc9v2zNu.s 			page 11


 315:src/setup.c   ****   __HAL_RCC_I2C2_CLK_ENABLE();
 260              		.loc 1 315 0
 261 0006 4A4D     		ldr	r5, .L7
 262 0008 EB69     		ldr	r3, [r5, #28]
 263 000a 43F48003 		orr	r3, r3, #4194304
 264 000e EB61     		str	r3, [r5, #28]
 265 0010 EB69     		ldr	r3, [r5, #28]
 266 0012 03F48003 		and	r3, r3, #4194304
 267 0016 0193     		str	r3, [sp, #4]
 268 0018 019B     		ldr	r3, [sp, #4]
 269              	.LBE5:
 270              	.LBB6:
 316:src/setup.c   ****   __HAL_RCC_DMA1_CLK_ENABLE();
 271              		.loc 1 316 0
 272 001a 6B69     		ldr	r3, [r5, #20]
 273 001c 43F00103 		orr	r3, r3, #1
 274 0020 6B61     		str	r3, [r5, #20]
 275 0022 6B69     		ldr	r3, [r5, #20]
 276 0024 03F00103 		and	r3, r3, #1
 277 0028 0293     		str	r3, [sp, #8]
 278 002a 029B     		ldr	r3, [sp, #8]
 279              	.LBE6:
 317:src/setup.c   **** 
 318:src/setup.c   ****   /* DMA1_Channel4_IRQn interrupt configuration */
 319:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 1, 4);
 280              		.loc 1 319 0
 281 002c 0422     		movs	r2, #4
 282 002e 0121     		movs	r1, #1
 283 0030 0E20     		movs	r0, #14
 284 0032 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 285              	.LVL9:
 320:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 286              		.loc 1 320 0
 287 0036 0E20     		movs	r0, #14
 288 0038 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 289              	.LVL10:
 321:src/setup.c   ****   /* DMA1_Channel5_IRQn interrupt configuration */
 322:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 3);
 290              		.loc 1 322 0
 291 003c 0322     		movs	r2, #3
 292 003e 0121     		movs	r1, #1
 293 0040 0F20     		movs	r0, #15
 294 0042 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 295              	.LVL11:
 323:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 296              		.loc 1 323 0
 297 0046 0F20     		movs	r0, #15
 298 0048 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 299              	.LVL12:
 324:src/setup.c   **** 
 325:src/setup.c   ****   hi2c2.Instance = I2C2;
 300              		.loc 1 325 0
 301 004c 394E     		ldr	r6, .L7+4
 302 004e 3A4B     		ldr	r3, .L7+8
 303 0050 3360     		str	r3, [r6]
 326:src/setup.c   ****   hi2c2.Init.ClockSpeed = 100000;
 304              		.loc 1 326 0
ARM GAS  /tmp/cc9v2zNu.s 			page 12


 305 0052 3A4B     		ldr	r3, .L7+12
 306 0054 7360     		str	r3, [r6, #4]
 327:src/setup.c   ****   hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 307              		.loc 1 327 0
 308 0056 0024     		movs	r4, #0
 309 0058 B460     		str	r4, [r6, #8]
 328:src/setup.c   ****   hi2c2.Init.OwnAddress1 = 0;
 310              		.loc 1 328 0
 311 005a F460     		str	r4, [r6, #12]
 329:src/setup.c   ****   hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 312              		.loc 1 329 0
 313 005c 4FF48043 		mov	r3, #16384
 314 0060 3361     		str	r3, [r6, #16]
 330:src/setup.c   ****   hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 315              		.loc 1 330 0
 316 0062 7461     		str	r4, [r6, #20]
 331:src/setup.c   ****   hi2c2.Init.OwnAddress2 = 0;
 317              		.loc 1 331 0
 318 0064 B461     		str	r4, [r6, #24]
 332:src/setup.c   ****   hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 319              		.loc 1 332 0
 320 0066 F461     		str	r4, [r6, #28]
 333:src/setup.c   ****   hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 321              		.loc 1 333 0
 322 0068 3462     		str	r4, [r6, #32]
 334:src/setup.c   ****   HAL_I2C_Init(&hi2c2);
 323              		.loc 1 334 0
 324 006a 3046     		mov	r0, r6
 325 006c FFF7FEFF 		bl	HAL_I2C_Init
 326              	.LVL13:
 327              	.LBB7:
 335:src/setup.c   **** 
 336:src/setup.c   ****   GPIO_InitTypeDef GPIO_InitStruct;
 337:src/setup.c   **** 
 338:src/setup.c   ****     __HAL_RCC_DMA1_CLK_ENABLE();
 328              		.loc 1 338 0
 329 0070 6B69     		ldr	r3, [r5, #20]
 330 0072 43F00103 		orr	r3, r3, #1
 331 0076 6B61     		str	r3, [r5, #20]
 332 0078 6B69     		ldr	r3, [r5, #20]
 333 007a 03F00103 		and	r3, r3, #1
 334 007e 0393     		str	r3, [sp, #12]
 335 0080 039B     		ldr	r3, [sp, #12]
 336              	.LBE7:
 337              	.LBB8:
 339:src/setup.c   ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 338              		.loc 1 339 0
 339 0082 AB69     		ldr	r3, [r5, #24]
 340 0084 43F00803 		orr	r3, r3, #8
 341 0088 AB61     		str	r3, [r5, #24]
 342 008a AB69     		ldr	r3, [r5, #24]
 343 008c 03F00803 		and	r3, r3, #8
 344 0090 0493     		str	r3, [sp, #16]
 345 0092 049B     		ldr	r3, [sp, #16]
 346              	.LBE8:
 340:src/setup.c   ****   /* USER CODE BEGIN I2C2_MspInit 0 */
 341:src/setup.c   **** 
ARM GAS  /tmp/cc9v2zNu.s 			page 13


 342:src/setup.c   ****   /* USER CODE END I2C2_MspInit 0 */
 343:src/setup.c   **** 
 344:src/setup.c   ****     /**I2C2 GPIO Configuration
 345:src/setup.c   ****     PB10     ------> I2C2_SCL
 346:src/setup.c   ****     PB11     ------> I2C2_SDA
 347:src/setup.c   ****     */
 348:src/setup.c   ****     GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 347              		.loc 1 348 0
 348 0094 4FF44063 		mov	r3, #3072
 349 0098 0693     		str	r3, [sp, #24]
 349:src/setup.c   ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 350              		.loc 1 349 0
 351 009a 1223     		movs	r3, #18
 352 009c 0793     		str	r3, [sp, #28]
 350:src/setup.c   ****     GPIO_InitStruct.Pull = GPIO_PULLUP;
 353              		.loc 1 350 0
 354 009e 0123     		movs	r3, #1
 355 00a0 0893     		str	r3, [sp, #32]
 351:src/setup.c   ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 356              		.loc 1 351 0
 357 00a2 0323     		movs	r3, #3
 358 00a4 0993     		str	r3, [sp, #36]
 352:src/setup.c   ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 359              		.loc 1 352 0
 360 00a6 06A9     		add	r1, sp, #24
 361 00a8 2548     		ldr	r0, .L7+16
 362 00aa FFF7FEFF 		bl	HAL_GPIO_Init
 363              	.LVL14:
 364              	.LBB9:
 353:src/setup.c   **** 
 354:src/setup.c   ****     /* Peripheral clock enable */
 355:src/setup.c   ****     __HAL_RCC_I2C2_CLK_ENABLE();
 365              		.loc 1 355 0
 366 00ae EB69     		ldr	r3, [r5, #28]
 367 00b0 43F48003 		orr	r3, r3, #4194304
 368 00b4 EB61     		str	r3, [r5, #28]
 369 00b6 EB69     		ldr	r3, [r5, #28]
 370 00b8 03F48003 		and	r3, r3, #4194304
 371 00bc 0593     		str	r3, [sp, #20]
 372 00be 059B     		ldr	r3, [sp, #20]
 373              	.LBE9:
 356:src/setup.c   **** 
 357:src/setup.c   ****     /* Peripheral DMA init*/
 358:src/setup.c   **** 
 359:src/setup.c   ****     hdma_i2c2_rx.Instance = DMA1_Channel5;
 374              		.loc 1 359 0
 375 00c0 204D     		ldr	r5, .L7+20
 376 00c2 214B     		ldr	r3, .L7+24
 377 00c4 2B60     		str	r3, [r5]
 360:src/setup.c   ****     hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 378              		.loc 1 360 0
 379 00c6 6C60     		str	r4, [r5, #4]
 361:src/setup.c   ****     hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 380              		.loc 1 361 0
 381 00c8 AC60     		str	r4, [r5, #8]
 362:src/setup.c   ****     hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 382              		.loc 1 362 0
ARM GAS  /tmp/cc9v2zNu.s 			page 14


 383 00ca 4FF08008 		mov	r8, #128
 384 00ce C5F80C80 		str	r8, [r5, #12]
 363:src/setup.c   ****     hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 385              		.loc 1 363 0
 386 00d2 2C61     		str	r4, [r5, #16]
 364:src/setup.c   ****     hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 387              		.loc 1 364 0
 388 00d4 6C61     		str	r4, [r5, #20]
 365:src/setup.c   ****     hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 389              		.loc 1 365 0
 390 00d6 AC61     		str	r4, [r5, #24]
 366:src/setup.c   ****     hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 391              		.loc 1 366 0
 392 00d8 4FF48057 		mov	r7, #4096
 393 00dc EF61     		str	r7, [r5, #28]
 367:src/setup.c   ****     HAL_DMA_Init(&hdma_i2c2_rx);
 394              		.loc 1 367 0
 395 00de 2846     		mov	r0, r5
 396 00e0 FFF7FEFF 		bl	HAL_DMA_Init
 397              	.LVL15:
 368:src/setup.c   **** 
 369:src/setup.c   ****     __HAL_LINKDMA(&hi2c2,hdmarx,hdma_i2c2_rx);
 398              		.loc 1 369 0
 399 00e4 B563     		str	r5, [r6, #56]
 400 00e6 6E62     		str	r6, [r5, #36]
 370:src/setup.c   **** 
 371:src/setup.c   ****     hdma_i2c2_tx.Instance = DMA1_Channel4;
 401              		.loc 1 371 0
 402 00e8 184D     		ldr	r5, .L7+28
 403 00ea 194B     		ldr	r3, .L7+32
 404 00ec 2B60     		str	r3, [r5]
 372:src/setup.c   ****     hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 405              		.loc 1 372 0
 406 00ee 1023     		movs	r3, #16
 407 00f0 6B60     		str	r3, [r5, #4]
 373:src/setup.c   ****     hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 408              		.loc 1 373 0
 409 00f2 AC60     		str	r4, [r5, #8]
 374:src/setup.c   ****     hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 410              		.loc 1 374 0
 411 00f4 C5F80C80 		str	r8, [r5, #12]
 375:src/setup.c   ****     hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 412              		.loc 1 375 0
 413 00f8 2C61     		str	r4, [r5, #16]
 376:src/setup.c   ****     hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 414              		.loc 1 376 0
 415 00fa 6C61     		str	r4, [r5, #20]
 377:src/setup.c   ****     hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 416              		.loc 1 377 0
 417 00fc AC61     		str	r4, [r5, #24]
 378:src/setup.c   ****     hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 418              		.loc 1 378 0
 419 00fe EF61     		str	r7, [r5, #28]
 379:src/setup.c   ****     HAL_DMA_Init(&hdma_i2c2_tx);
 420              		.loc 1 379 0
 421 0100 2846     		mov	r0, r5
 422 0102 FFF7FEFF 		bl	HAL_DMA_Init
ARM GAS  /tmp/cc9v2zNu.s 			page 15


 423              	.LVL16:
 380:src/setup.c   **** 
 381:src/setup.c   ****     __HAL_LINKDMA(&hi2c2,hdmatx,hdma_i2c2_tx);
 424              		.loc 1 381 0
 425 0106 7563     		str	r5, [r6, #52]
 426 0108 6E62     		str	r6, [r5, #36]
 382:src/setup.c   **** 
 383:src/setup.c   ****     /* Peripheral interrupt init */
 384:src/setup.c   ****     HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 427              		.loc 1 384 0
 428 010a 2246     		mov	r2, r4
 429 010c 2146     		mov	r1, r4
 430 010e 2120     		movs	r0, #33
 431 0110 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 432              	.LVL17:
 385:src/setup.c   ****     HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 433              		.loc 1 385 0
 434 0114 2120     		movs	r0, #33
 435 0116 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 436              	.LVL18:
 386:src/setup.c   ****     HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 437              		.loc 1 386 0
 438 011a 2246     		mov	r2, r4
 439 011c 2146     		mov	r1, r4
 440 011e 2220     		movs	r0, #34
 441 0120 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 442              	.LVL19:
 387:src/setup.c   ****     HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 443              		.loc 1 387 0
 444 0124 2220     		movs	r0, #34
 445 0126 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 446              	.LVL20:
 388:src/setup.c   ****   /* USER CODE BEGIN I2C2_MspInit 1 */
 389:src/setup.c   **** 
 390:src/setup.c   ****   /* USER CODE END I2C2_MspInit 1 */
 391:src/setup.c   **** 
 392:src/setup.c   **** 
 393:src/setup.c   **** }
 447              		.loc 1 393 0
 448 012a 0AB0     		add	sp, sp, #40
 449              	.LCFI5:
 450              		.cfi_def_cfa_offset 24
 451              		@ sp needed
 452 012c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 453              	.L8:
 454              		.align	2
 455              	.L7:
 456 0130 00100240 		.word	1073876992
 457 0134 00000000 		.word	hi2c2
 458 0138 00580040 		.word	1073764352
 459 013c A0860100 		.word	100000
 460 0140 000C0140 		.word	1073810432
 461 0144 00000000 		.word	hdma_i2c2_rx
 462 0148 58000240 		.word	1073872984
 463 014c 00000000 		.word	hdma_i2c2_tx
 464 0150 44000240 		.word	1073872964
 465              		.cfi_endproc
ARM GAS  /tmp/cc9v2zNu.s 			page 16


 466              	.LFE67:
 468              		.section	.text.MX_GPIO_Init,"ax",%progbits
 469              		.align	1
 470              		.global	MX_GPIO_Init
 471              		.syntax unified
 472              		.thumb
 473              		.thumb_func
 474              		.fpu softvfp
 476              	MX_GPIO_Init:
 477              	.LFB68:
 394:src/setup.c   **** 
 395:src/setup.c   **** void MX_GPIO_Init(void) {
 478              		.loc 1 395 0
 479              		.cfi_startproc
 480              		@ args = 0, pretend = 0, frame = 32
 481              		@ frame_needed = 0, uses_anonymous_args = 0
 482 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 483              	.LCFI6:
 484              		.cfi_def_cfa_offset 36
 485              		.cfi_offset 4, -36
 486              		.cfi_offset 5, -32
 487              		.cfi_offset 6, -28
 488              		.cfi_offset 7, -24
 489              		.cfi_offset 8, -20
 490              		.cfi_offset 9, -16
 491              		.cfi_offset 10, -12
 492              		.cfi_offset 11, -8
 493              		.cfi_offset 14, -4
 494 0004 89B0     		sub	sp, sp, #36
 495              	.LCFI7:
 496              		.cfi_def_cfa_offset 72
 497              	.LBB10:
 396:src/setup.c   ****   GPIO_InitTypeDef GPIO_InitStruct;
 397:src/setup.c   **** 
 398:src/setup.c   ****   /* GPIO Ports Clock Enable */
 399:src/setup.c   ****   __HAL_RCC_GPIOA_CLK_ENABLE();
 498              		.loc 1 399 0
 499 0006 884B     		ldr	r3, .L11
 500 0008 9A69     		ldr	r2, [r3, #24]
 501 000a 42F00402 		orr	r2, r2, #4
 502 000e 9A61     		str	r2, [r3, #24]
 503 0010 9A69     		ldr	r2, [r3, #24]
 504 0012 02F00402 		and	r2, r2, #4
 505 0016 0192     		str	r2, [sp, #4]
 506 0018 019A     		ldr	r2, [sp, #4]
 507              	.LBE10:
 508              	.LBB11:
 400:src/setup.c   ****   __HAL_RCC_GPIOB_CLK_ENABLE();
 509              		.loc 1 400 0
 510 001a 9A69     		ldr	r2, [r3, #24]
 511 001c 42F00802 		orr	r2, r2, #8
 512 0020 9A61     		str	r2, [r3, #24]
 513 0022 9A69     		ldr	r2, [r3, #24]
 514 0024 02F00802 		and	r2, r2, #8
 515 0028 0292     		str	r2, [sp, #8]
 516 002a 029A     		ldr	r2, [sp, #8]
 517              	.LBE11:
ARM GAS  /tmp/cc9v2zNu.s 			page 17


 518              	.LBB12:
 401:src/setup.c   ****   __HAL_RCC_GPIOC_CLK_ENABLE();
 519              		.loc 1 401 0
 520 002c 9A69     		ldr	r2, [r3, #24]
 521 002e 42F01002 		orr	r2, r2, #16
 522 0032 9A61     		str	r2, [r3, #24]
 523 0034 9B69     		ldr	r3, [r3, #24]
 524 0036 03F01003 		and	r3, r3, #16
 525 003a 0393     		str	r3, [sp, #12]
 526 003c 039B     		ldr	r3, [sp, #12]
 527              	.LBE12:
 402:src/setup.c   **** 
 403:src/setup.c   ****   GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 404:src/setup.c   ****   GPIO_InitStruct.Pull  = GPIO_NOPULL;
 528              		.loc 1 404 0
 529 003e 4FF00009 		mov	r9, #0
 530 0042 CDF81890 		str	r9, [sp, #24]
 405:src/setup.c   ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 531              		.loc 1 405 0
 532 0046 0226     		movs	r6, #2
 533 0048 0796     		str	r6, [sp, #28]
 406:src/setup.c   **** 
 407:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_HALL_U_PIN;
 534              		.loc 1 407 0
 535 004a 4FF0200A 		mov	r10, #32
 536 004e CDF810A0 		str	r10, [sp, #16]
 408:src/setup.c   ****   #ifdef HALL_INTERRUPTS
 409:src/setup.c   ****     GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING_FALLING;
 537              		.loc 1 409 0
 538 0052 764B     		ldr	r3, .L11+4
 539 0054 0593     		str	r3, [sp, #20]
 410:src/setup.c   ****   #endif
 411:src/setup.c   ****     HAL_GPIO_Init(LEFT_HALL_U_PORT, &GPIO_InitStruct);
 540              		.loc 1 411 0
 541 0056 04A9     		add	r1, sp, #16
 542 0058 7548     		ldr	r0, .L11+8
 543 005a FFF7FEFF 		bl	HAL_GPIO_Init
 544              	.LVL21:
 412:src/setup.c   **** 
 413:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_HALL_V_PIN;
 545              		.loc 1 413 0
 546 005e 4023     		movs	r3, #64
 547 0060 0493     		str	r3, [sp, #16]
 414:src/setup.c   ****   HAL_GPIO_Init(LEFT_HALL_V_PORT, &GPIO_InitStruct);
 548              		.loc 1 414 0
 549 0062 04A9     		add	r1, sp, #16
 550 0064 7248     		ldr	r0, .L11+8
 551 0066 FFF7FEFF 		bl	HAL_GPIO_Init
 552              	.LVL22:
 415:src/setup.c   **** 
 416:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_HALL_W_PIN;
 553              		.loc 1 416 0
 554 006a 4FF08008 		mov	r8, #128
 555 006e CDF81080 		str	r8, [sp, #16]
 417:src/setup.c   ****   HAL_GPIO_Init(LEFT_HALL_W_PORT, &GPIO_InitStruct);
 556              		.loc 1 417 0
 557 0072 04A9     		add	r1, sp, #16
ARM GAS  /tmp/cc9v2zNu.s 			page 18


 558 0074 6E48     		ldr	r0, .L11+8
 559 0076 FFF7FEFF 		bl	HAL_GPIO_Init
 560              	.LVL23:
 418:src/setup.c   **** 
 419:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_HALL_U_PIN;
 561              		.loc 1 419 0
 562 007a 4FF48064 		mov	r4, #1024
 563 007e 0494     		str	r4, [sp, #16]
 420:src/setup.c   ****   HAL_GPIO_Init(RIGHT_HALL_U_PORT, &GPIO_InitStruct);
 564              		.loc 1 420 0
 565 0080 04A9     		add	r1, sp, #16
 566 0082 6C48     		ldr	r0, .L11+12
 567 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 568              	.LVL24:
 421:src/setup.c   **** 
 422:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_HALL_V_PIN;
 569              		.loc 1 422 0
 570 0088 4FF40063 		mov	r3, #2048
 571 008c 0493     		str	r3, [sp, #16]
 423:src/setup.c   ****   HAL_GPIO_Init(RIGHT_HALL_V_PORT, &GPIO_InitStruct);
 572              		.loc 1 423 0
 573 008e 04A9     		add	r1, sp, #16
 574 0090 6848     		ldr	r0, .L11+12
 575 0092 FFF7FEFF 		bl	HAL_GPIO_Init
 576              	.LVL25:
 424:src/setup.c   **** 
 425:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_HALL_W_PIN;
 577              		.loc 1 425 0
 578 0096 4FF48055 		mov	r5, #4096
 579 009a 0495     		str	r5, [sp, #16]
 426:src/setup.c   ****   HAL_GPIO_Init(RIGHT_HALL_W_PORT, &GPIO_InitStruct);
 580              		.loc 1 426 0
 581 009c 04A9     		add	r1, sp, #16
 582 009e 6548     		ldr	r0, .L11+12
 583 00a0 FFF7FEFF 		bl	HAL_GPIO_Init
 584              	.LVL26:
 427:src/setup.c   **** 
 428:src/setup.c   ****   GPIO_InitStruct.Mode  = GPIO_MODE_INPUT;
 585              		.loc 1 428 0
 586 00a4 CDF81490 		str	r9, [sp, #20]
 429:src/setup.c   ****   GPIO_InitStruct.Pin = CHARGER_PIN;
 587              		.loc 1 429 0
 588 00a8 0495     		str	r5, [sp, #16]
 430:src/setup.c   ****   GPIO_InitStruct.Pull  = GPIO_PULLUP;
 589              		.loc 1 430 0
 590 00aa 0127     		movs	r7, #1
 591 00ac 0697     		str	r7, [sp, #24]
 431:src/setup.c   ****   HAL_GPIO_Init(CHARGER_PORT, &GPIO_InitStruct);
 592              		.loc 1 431 0
 593 00ae 04A9     		add	r1, sp, #16
 594 00b0 6148     		ldr	r0, .L11+16
 595 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 596              	.LVL27:
 432:src/setup.c   **** 
 433:src/setup.c   ****   GPIO_InitStruct.Pull  = GPIO_NOPULL;
 597              		.loc 1 433 0
 598 00b6 CDF81890 		str	r9, [sp, #24]
ARM GAS  /tmp/cc9v2zNu.s 			page 19


 434:src/setup.c   ****   GPIO_InitStruct.Pin = BUTTON_PIN;
 599              		.loc 1 434 0
 600 00ba 0496     		str	r6, [sp, #16]
 435:src/setup.c   ****   HAL_GPIO_Init(BUTTON_PORT, &GPIO_InitStruct);
 601              		.loc 1 435 0
 602 00bc 04A9     		add	r1, sp, #16
 603 00be 5E48     		ldr	r0, .L11+16
 604 00c0 FFF7FEFF 		bl	HAL_GPIO_Init
 605              	.LVL28:
 436:src/setup.c   **** 
 437:src/setup.c   **** 
 438:src/setup.c   ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 606              		.loc 1 438 0
 607 00c4 0597     		str	r7, [sp, #20]
 439:src/setup.c   **** 
 440:src/setup.c   ****   GPIO_InitStruct.Pin = LED_PIN;
 608              		.loc 1 440 0
 609 00c6 4FF00409 		mov	r9, #4
 610 00ca CDF81090 		str	r9, [sp, #16]
 441:src/setup.c   ****   HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 611              		.loc 1 441 0
 612 00ce 04A9     		add	r1, sp, #16
 613 00d0 5748     		ldr	r0, .L11+8
 614 00d2 FFF7FEFF 		bl	HAL_GPIO_Init
 615              	.LVL29:
 442:src/setup.c   **** 
 443:src/setup.c   ****   GPIO_InitStruct.Pin = BUZZER_PIN;
 616              		.loc 1 443 0
 617 00d6 1025     		movs	r5, #16
 618 00d8 0495     		str	r5, [sp, #16]
 444:src/setup.c   ****   HAL_GPIO_Init(BUZZER_PORT, &GPIO_InitStruct);
 619              		.loc 1 444 0
 620 00da 0DEB0501 		add	r1, sp, r5
 621 00de 5648     		ldr	r0, .L11+16
 622 00e0 FFF7FEFF 		bl	HAL_GPIO_Init
 623              	.LVL30:
 445:src/setup.c   **** 
 446:src/setup.c   ****   GPIO_InitStruct.Pin = OFF_PIN;
 624              		.loc 1 446 0
 625 00e4 CDF810A0 		str	r10, [sp, #16]
 447:src/setup.c   ****   HAL_GPIO_Init(OFF_PORT, &GPIO_InitStruct);
 626              		.loc 1 447 0
 627 00e8 0DEB0501 		add	r1, sp, r5
 628 00ec 5248     		ldr	r0, .L11+16
 629 00ee FFF7FEFF 		bl	HAL_GPIO_Init
 630              	.LVL31:
 448:src/setup.c   **** 
 449:src/setup.c   **** 
 450:src/setup.c   ****   GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 631              		.loc 1 450 0
 632 00f2 0323     		movs	r3, #3
 633 00f4 0593     		str	r3, [sp, #20]
 451:src/setup.c   **** 
 452:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_DC_CUR_PIN;
 634              		.loc 1 452 0
 635 00f6 0497     		str	r7, [sp, #16]
 453:src/setup.c   ****   HAL_GPIO_Init(LEFT_DC_CUR_PORT, &GPIO_InitStruct);
ARM GAS  /tmp/cc9v2zNu.s 			page 20


 636              		.loc 1 453 0
 637 00f8 0DEB0501 		add	r1, sp, r5
 638 00fc 4D48     		ldr	r0, .L11+12
 639 00fe FFF7FEFF 		bl	HAL_GPIO_Init
 640              	.LVL32:
 454:src/setup.c   **** 
 455:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_U_CUR_PIN;
 641              		.loc 1 455 0
 642 0102 0497     		str	r7, [sp, #16]
 456:src/setup.c   ****   HAL_GPIO_Init(LEFT_U_CUR_PORT, &GPIO_InitStruct);
 643              		.loc 1 456 0
 644 0104 0DEB0501 		add	r1, sp, r5
 645 0108 4B48     		ldr	r0, .L11+16
 646 010a FFF7FEFF 		bl	HAL_GPIO_Init
 647              	.LVL33:
 457:src/setup.c   **** 
 458:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_V_CUR_PIN;
 648              		.loc 1 458 0
 649 010e 4FF0080B 		mov	fp, #8
 650 0112 CDF810B0 		str	fp, [sp, #16]
 459:src/setup.c   ****   HAL_GPIO_Init(LEFT_V_CUR_PORT, &GPIO_InitStruct);
 651              		.loc 1 459 0
 652 0116 0DEB0501 		add	r1, sp, r5
 653 011a 4648     		ldr	r0, .L11+12
 654 011c FFF7FEFF 		bl	HAL_GPIO_Init
 655              	.LVL34:
 460:src/setup.c   **** 
 461:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_DC_CUR_PIN;
 656              		.loc 1 461 0
 657 0120 0496     		str	r6, [sp, #16]
 462:src/setup.c   ****   HAL_GPIO_Init(RIGHT_DC_CUR_PORT, &GPIO_InitStruct);
 658              		.loc 1 462 0
 659 0122 0DEB0501 		add	r1, sp, r5
 660 0126 4348     		ldr	r0, .L11+12
 661 0128 FFF7FEFF 		bl	HAL_GPIO_Init
 662              	.LVL35:
 463:src/setup.c   **** 
 464:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_U_CUR_PIN;
 663              		.loc 1 464 0
 664 012c 0495     		str	r5, [sp, #16]
 465:src/setup.c   ****   HAL_GPIO_Init(RIGHT_U_CUR_PORT, &GPIO_InitStruct);
 665              		.loc 1 465 0
 666 012e 0DEB0501 		add	r1, sp, r5
 667 0132 4048     		ldr	r0, .L11+12
 668 0134 FFF7FEFF 		bl	HAL_GPIO_Init
 669              	.LVL36:
 466:src/setup.c   **** 
 467:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_V_CUR_PIN;
 670              		.loc 1 467 0
 671 0138 CDF810A0 		str	r10, [sp, #16]
 468:src/setup.c   ****   HAL_GPIO_Init(RIGHT_V_CUR_PORT, &GPIO_InitStruct);
 672              		.loc 1 468 0
 673 013c 0DEB0501 		add	r1, sp, r5
 674 0140 3C48     		ldr	r0, .L11+12
 675 0142 FFF7FEFF 		bl	HAL_GPIO_Init
 676              	.LVL37:
 469:src/setup.c   **** 
ARM GAS  /tmp/cc9v2zNu.s 			page 21


 470:src/setup.c   ****   GPIO_InitStruct.Pin = DCLINK_PIN;
 677              		.loc 1 470 0
 678 0146 CDF81090 		str	r9, [sp, #16]
 471:src/setup.c   ****   HAL_GPIO_Init(DCLINK_PORT, &GPIO_InitStruct);
 679              		.loc 1 471 0
 680 014a 0DEB0501 		add	r1, sp, r5
 681 014e 3948     		ldr	r0, .L11+12
 682 0150 FFF7FEFF 		bl	HAL_GPIO_Init
 683              	.LVL38:
 472:src/setup.c   **** 
 473:src/setup.c   ****   //Analog in
 474:src/setup.c   ****   GPIO_InitStruct.Pin = GPIO_PIN_3;
 684              		.loc 1 474 0
 685 0154 CDF810B0 		str	fp, [sp, #16]
 475:src/setup.c   ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 686              		.loc 1 475 0
 687 0158 0DEB0501 		add	r1, sp, r5
 688 015c 3648     		ldr	r0, .L11+16
 689 015e FFF7FEFF 		bl	HAL_GPIO_Init
 690              	.LVL39:
 476:src/setup.c   ****   GPIO_InitStruct.Pin = GPIO_PIN_2;
 691              		.loc 1 476 0
 692 0162 CDF81090 		str	r9, [sp, #16]
 477:src/setup.c   ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 693              		.loc 1 477 0
 694 0166 0DEB0501 		add	r1, sp, r5
 695 016a 3348     		ldr	r0, .L11+16
 696 016c FFF7FEFF 		bl	HAL_GPIO_Init
 697              	.LVL40:
 478:src/setup.c   **** 
 479:src/setup.c   ****   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 698              		.loc 1 479 0
 699 0170 0596     		str	r6, [sp, #20]
 480:src/setup.c   **** 
 481:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_UH_PIN;
 700              		.loc 1 481 0
 701 0172 4023     		movs	r3, #64
 702 0174 0493     		str	r3, [sp, #16]
 482:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_UH_PORT, &GPIO_InitStruct);
 703              		.loc 1 482 0
 704 0176 0DEB0501 		add	r1, sp, r5
 705 017a 2E48     		ldr	r0, .L11+12
 706 017c FFF7FEFF 		bl	HAL_GPIO_Init
 707              	.LVL41:
 483:src/setup.c   **** 
 484:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_VH_PIN;
 708              		.loc 1 484 0
 709 0180 CDF81080 		str	r8, [sp, #16]
 485:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_VH_PORT, &GPIO_InitStruct);
 710              		.loc 1 485 0
 711 0184 0DEB0501 		add	r1, sp, r5
 712 0188 2A48     		ldr	r0, .L11+12
 713 018a FFF7FEFF 		bl	HAL_GPIO_Init
 714              	.LVL42:
 486:src/setup.c   **** 
 487:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_WH_PIN;
 715              		.loc 1 487 0
ARM GAS  /tmp/cc9v2zNu.s 			page 22


 716 018e 4FF48079 		mov	r9, #256
 717 0192 CDF81090 		str	r9, [sp, #16]
 488:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_WH_PORT, &GPIO_InitStruct);
 718              		.loc 1 488 0
 719 0196 0DEB0501 		add	r1, sp, r5
 720 019a 2648     		ldr	r0, .L11+12
 721 019c FFF7FEFF 		bl	HAL_GPIO_Init
 722              	.LVL43:
 489:src/setup.c   **** 
 490:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_UL_PIN;
 723              		.loc 1 490 0
 724 01a0 CDF81080 		str	r8, [sp, #16]
 491:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_UL_PORT, &GPIO_InitStruct);
 725              		.loc 1 491 0
 726 01a4 0DEB0501 		add	r1, sp, r5
 727 01a8 2348     		ldr	r0, .L11+16
 728 01aa FFF7FEFF 		bl	HAL_GPIO_Init
 729              	.LVL44:
 492:src/setup.c   **** 
 493:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_VL_PIN;
 730              		.loc 1 493 0
 731 01ae 0497     		str	r7, [sp, #16]
 494:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_VL_PORT, &GPIO_InitStruct);
 732              		.loc 1 494 0
 733 01b0 0DEB0501 		add	r1, sp, r5
 734 01b4 1E48     		ldr	r0, .L11+8
 735 01b6 FFF7FEFF 		bl	HAL_GPIO_Init
 736              	.LVL45:
 495:src/setup.c   **** 
 496:src/setup.c   ****   GPIO_InitStruct.Pin = LEFT_TIM_WL_PIN;
 737              		.loc 1 496 0
 738 01ba 0496     		str	r6, [sp, #16]
 497:src/setup.c   ****   HAL_GPIO_Init(LEFT_TIM_WL_PORT, &GPIO_InitStruct);
 739              		.loc 1 497 0
 740 01bc 0DEB0501 		add	r1, sp, r5
 741 01c0 1B48     		ldr	r0, .L11+8
 742 01c2 FFF7FEFF 		bl	HAL_GPIO_Init
 743              	.LVL46:
 498:src/setup.c   **** 
 499:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_UH_PIN;
 744              		.loc 1 499 0
 745 01c6 CDF81090 		str	r9, [sp, #16]
 500:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_UH_PORT, &GPIO_InitStruct);
 746              		.loc 1 500 0
 747 01ca 0DEB0501 		add	r1, sp, r5
 748 01ce 1A48     		ldr	r0, .L11+16
 749 01d0 FFF7FEFF 		bl	HAL_GPIO_Init
 750              	.LVL47:
 501:src/setup.c   **** 
 502:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_VH_PIN;
 751              		.loc 1 502 0
 752 01d4 4FF40073 		mov	r3, #512
 753 01d8 0493     		str	r3, [sp, #16]
 503:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_VH_PORT, &GPIO_InitStruct);
 754              		.loc 1 503 0
 755 01da 0DEB0501 		add	r1, sp, r5
 756 01de 1648     		ldr	r0, .L11+16
ARM GAS  /tmp/cc9v2zNu.s 			page 23


 757 01e0 FFF7FEFF 		bl	HAL_GPIO_Init
 758              	.LVL48:
 504:src/setup.c   **** 
 505:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_WH_PIN;
 759              		.loc 1 505 0
 760 01e4 0494     		str	r4, [sp, #16]
 506:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_WH_PORT, &GPIO_InitStruct);
 761              		.loc 1 506 0
 762 01e6 0DEB0501 		add	r1, sp, r5
 763 01ea 1348     		ldr	r0, .L11+16
 764 01ec FFF7FEFF 		bl	HAL_GPIO_Init
 765              	.LVL49:
 507:src/setup.c   **** 
 508:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_UL_PIN;
 766              		.loc 1 508 0
 767 01f0 4FF40053 		mov	r3, #8192
 768 01f4 0493     		str	r3, [sp, #16]
 509:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_UL_PORT, &GPIO_InitStruct);
 769              		.loc 1 509 0
 770 01f6 0DEB0501 		add	r1, sp, r5
 771 01fa 0D48     		ldr	r0, .L11+8
 772 01fc FFF7FEFF 		bl	HAL_GPIO_Init
 773              	.LVL50:
 510:src/setup.c   **** 
 511:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_VL_PIN;
 774              		.loc 1 511 0
 775 0200 4FF48043 		mov	r3, #16384
 776 0204 0493     		str	r3, [sp, #16]
 512:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_VL_PORT, &GPIO_InitStruct);
 777              		.loc 1 512 0
 778 0206 0DEB0501 		add	r1, sp, r5
 779 020a 0948     		ldr	r0, .L11+8
 780 020c FFF7FEFF 		bl	HAL_GPIO_Init
 781              	.LVL51:
 513:src/setup.c   **** 
 514:src/setup.c   ****   GPIO_InitStruct.Pin = RIGHT_TIM_WL_PIN;
 782              		.loc 1 514 0
 783 0210 4FF40043 		mov	r3, #32768
 784 0214 0493     		str	r3, [sp, #16]
 515:src/setup.c   ****   HAL_GPIO_Init(RIGHT_TIM_WL_PORT, &GPIO_InitStruct);
 785              		.loc 1 515 0
 786 0216 0DEB0501 		add	r1, sp, r5
 787 021a 0548     		ldr	r0, .L11+8
 788 021c FFF7FEFF 		bl	HAL_GPIO_Init
 789              	.LVL52:
 516:src/setup.c   **** }
 790              		.loc 1 516 0
 791 0220 09B0     		add	sp, sp, #36
 792              	.LCFI8:
 793              		.cfi_def_cfa_offset 36
 794              		@ sp needed
 795 0222 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 796              	.L12:
 797 0226 00BF     		.align	2
 798              	.L11:
 799 0228 00100240 		.word	1073876992
 800 022c 00003110 		.word	271646720
ARM GAS  /tmp/cc9v2zNu.s 			page 24


 801 0230 000C0140 		.word	1073810432
 802 0234 00100140 		.word	1073811456
 803 0238 00080140 		.word	1073809408
 804              		.cfi_endproc
 805              	.LFE68:
 807              		.section	.text.MX_TIM_Init,"ax",%progbits
 808              		.align	1
 809              		.global	MX_TIM_Init
 810              		.syntax unified
 811              		.thumb
 812              		.thumb_func
 813              		.fpu softvfp
 815              	MX_TIM_Init:
 816              	.LFB69:
 517:src/setup.c   **** 
 518:src/setup.c   **** void MX_TIM_Init(void) {
 817              		.loc 1 518 0
 818              		.cfi_startproc
 819              		@ args = 0, pretend = 0, frame = 96
 820              		@ frame_needed = 0, uses_anonymous_args = 0
 821 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 822              	.LCFI9:
 823              		.cfi_def_cfa_offset 36
 824              		.cfi_offset 4, -36
 825              		.cfi_offset 5, -32
 826              		.cfi_offset 6, -28
 827              		.cfi_offset 7, -24
 828              		.cfi_offset 8, -20
 829              		.cfi_offset 9, -16
 830              		.cfi_offset 10, -12
 831              		.cfi_offset 11, -8
 832              		.cfi_offset 14, -4
 833 0004 99B0     		sub	sp, sp, #100
 834              	.LCFI10:
 835              		.cfi_def_cfa_offset 136
 836              	.LBB13:
 519:src/setup.c   ****   __HAL_RCC_TIM1_CLK_ENABLE();
 837              		.loc 1 519 0
 838 0006 754B     		ldr	r3, .L15
 839 0008 9A69     		ldr	r2, [r3, #24]
 840 000a 42F40062 		orr	r2, r2, #2048
 841 000e 9A61     		str	r2, [r3, #24]
 842 0010 9A69     		ldr	r2, [r3, #24]
 843 0012 02F40062 		and	r2, r2, #2048
 844 0016 0192     		str	r2, [sp, #4]
 845 0018 019A     		ldr	r2, [sp, #4]
 846              	.LBE13:
 847              	.LBB14:
 520:src/setup.c   ****   __HAL_RCC_TIM8_CLK_ENABLE();
 848              		.loc 1 520 0
 849 001a 9A69     		ldr	r2, [r3, #24]
 850 001c 42F40052 		orr	r2, r2, #8192
 851 0020 9A61     		str	r2, [r3, #24]
 852 0022 9B69     		ldr	r3, [r3, #24]
 853 0024 03F40053 		and	r3, r3, #8192
 854 0028 0293     		str	r3, [sp, #8]
 855 002a 029B     		ldr	r3, [sp, #8]
ARM GAS  /tmp/cc9v2zNu.s 			page 25


 856              	.LBE14:
 521:src/setup.c   **** 
 522:src/setup.c   ****   TIM_MasterConfigTypeDef sMasterConfig;
 523:src/setup.c   ****   TIM_OC_InitTypeDef sConfigOC;
 524:src/setup.c   ****   TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;
 525:src/setup.c   ****   TIM_SlaveConfigTypeDef sTimConfig;
 526:src/setup.c   **** 
 527:src/setup.c   ****   htim_right.Instance               = RIGHT_TIM;
 857              		.loc 1 527 0
 858 002c 6C4E     		ldr	r6, .L15+4
 859 002e DFF8B891 		ldr	r9, .L15+12
 860 0032 C6F80090 		str	r9, [r6]
 528:src/setup.c   ****   htim_right.Init.Prescaler         = 0;
 861              		.loc 1 528 0
 862 0036 0024     		movs	r4, #0
 863 0038 7460     		str	r4, [r6, #4]
 529:src/setup.c   ****   htim_right.Init.CounterMode       = TIM_COUNTERMODE_CENTERALIGNED1;
 864              		.loc 1 529 0
 865 003a 4FF02008 		mov	r8, #32
 866 003e C6F80880 		str	r8, [r6, #8]
 530:src/setup.c   ****   htim_right.Init.Period            = 64000000 / 2 / PWM_FREQ;
 867              		.loc 1 530 0
 868 0042 4FF4FA6B 		mov	fp, #2000
 869 0046 C6F80CB0 		str	fp, [r6, #12]
 531:src/setup.c   ****   htim_right.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 870              		.loc 1 531 0
 871 004a 3461     		str	r4, [r6, #16]
 532:src/setup.c   ****   htim_right.Init.RepetitionCounter = 0;
 872              		.loc 1 532 0
 873 004c 7461     		str	r4, [r6, #20]
 533:src/setup.c   ****   htim_right.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 874              		.loc 1 533 0
 875 004e B461     		str	r4, [r6, #24]
 534:src/setup.c   ****   HAL_TIM_PWM_Init(&htim_right);
 876              		.loc 1 534 0
 877 0050 3046     		mov	r0, r6
 878 0052 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 879              	.LVL53:
 535:src/setup.c   **** 
 536:src/setup.c   ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 880              		.loc 1 536 0
 881 0056 1023     		movs	r3, #16
 882 0058 1693     		str	r3, [sp, #88]
 537:src/setup.c   ****   sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_DISABLE;
 883              		.loc 1 537 0
 884 005a 1794     		str	r4, [sp, #92]
 538:src/setup.c   ****   HAL_TIMEx_MasterConfigSynchronization(&htim_right, &sMasterConfig);
 885              		.loc 1 538 0
 886 005c 16A9     		add	r1, sp, #88
 887 005e 3046     		mov	r0, r6
 888 0060 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 889              	.LVL54:
 539:src/setup.c   **** 
 540:src/setup.c   ****   sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 890              		.loc 1 540 0
 891 0064 6023     		movs	r3, #96
 892 0066 0F93     		str	r3, [sp, #60]
ARM GAS  /tmp/cc9v2zNu.s 			page 26


 541:src/setup.c   ****   sConfigOC.Pulse        = 0;
 893              		.loc 1 541 0
 894 0068 1094     		str	r4, [sp, #64]
 542:src/setup.c   ****   sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 895              		.loc 1 542 0
 896 006a 1194     		str	r4, [sp, #68]
 543:src/setup.c   ****   sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_LOW;
 897              		.loc 1 543 0
 898 006c 0827     		movs	r7, #8
 899 006e 1297     		str	r7, [sp, #72]
 544:src/setup.c   ****   sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 900              		.loc 1 544 0
 901 0070 1394     		str	r4, [sp, #76]
 545:src/setup.c   ****   sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 902              		.loc 1 545 0
 903 0072 1494     		str	r4, [sp, #80]
 546:src/setup.c   ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 904              		.loc 1 546 0
 905 0074 4FF40073 		mov	r3, #512
 906 0078 1593     		str	r3, [sp, #84]
 547:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_right, &sConfigOC, TIM_CHANNEL_1);
 907              		.loc 1 547 0
 908 007a 2246     		mov	r2, r4
 909 007c 0FA9     		add	r1, sp, #60
 910 007e 3046     		mov	r0, r6
 911 0080 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 912              	.LVL55:
 548:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_right, &sConfigOC, TIM_CHANNEL_2);
 913              		.loc 1 548 0
 914 0084 0422     		movs	r2, #4
 915 0086 0FA9     		add	r1, sp, #60
 916 0088 3046     		mov	r0, r6
 917 008a FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 918              	.LVL56:
 549:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_right, &sConfigOC, TIM_CHANNEL_3);
 919              		.loc 1 549 0
 920 008e 3A46     		mov	r2, r7
 921 0090 0FA9     		add	r1, sp, #60
 922 0092 3046     		mov	r0, r6
 923 0094 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 924              	.LVL57:
 550:src/setup.c   **** 
 551:src/setup.c   ****   sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_ENABLE;
 925              		.loc 1 551 0
 926 0098 4FF40063 		mov	r3, #2048
 927 009c 0893     		str	r3, [sp, #32]
 552:src/setup.c   ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 928              		.loc 1 552 0
 929 009e 4FF48063 		mov	r3, #1024
 930 00a2 0993     		str	r3, [sp, #36]
 553:src/setup.c   ****   sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 931              		.loc 1 553 0
 932 00a4 0A94     		str	r4, [sp, #40]
 554:src/setup.c   ****   sBreakDeadTimeConfig.DeadTime         = DEAD_TIME;
 933              		.loc 1 554 0
 934 00a6 CDF82C80 		str	r8, [sp, #44]
 555:src/setup.c   ****   sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
ARM GAS  /tmp/cc9v2zNu.s 			page 27


 935              		.loc 1 555 0
 936 00aa 0C94     		str	r4, [sp, #48]
 556:src/setup.c   ****   sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_LOW;
 937              		.loc 1 556 0
 938 00ac 0D94     		str	r4, [sp, #52]
 557:src/setup.c   ****   sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 939              		.loc 1 557 0
 940 00ae 0E94     		str	r4, [sp, #56]
 558:src/setup.c   ****   HAL_TIMEx_ConfigBreakDeadTime(&htim_right, &sBreakDeadTimeConfig);
 941              		.loc 1 558 0
 942 00b0 0DEB0801 		add	r1, sp, r8
 943 00b4 3046     		mov	r0, r6
 944 00b6 FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 945              	.LVL58:
 559:src/setup.c   **** 
 560:src/setup.c   ****   htim_left.Instance               = LEFT_TIM;
 946              		.loc 1 560 0
 947 00ba 4A4D     		ldr	r5, .L15+8
 948 00bc DFF82CA1 		ldr	r10, .L15+16
 949 00c0 C5F800A0 		str	r10, [r5]
 561:src/setup.c   ****   htim_left.Init.Prescaler         = 0;
 950              		.loc 1 561 0
 951 00c4 6C60     		str	r4, [r5, #4]
 562:src/setup.c   ****   htim_left.Init.CounterMode       = TIM_COUNTERMODE_CENTERALIGNED1;
 952              		.loc 1 562 0
 953 00c6 C5F80880 		str	r8, [r5, #8]
 563:src/setup.c   ****   htim_left.Init.Period            = 64000000 / 2 / PWM_FREQ;
 954              		.loc 1 563 0
 955 00ca C5F80CB0 		str	fp, [r5, #12]
 564:src/setup.c   ****   htim_left.Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 956              		.loc 1 564 0
 957 00ce 2C61     		str	r4, [r5, #16]
 565:src/setup.c   ****   htim_left.Init.RepetitionCounter = 0;
 958              		.loc 1 565 0
 959 00d0 6C61     		str	r4, [r5, #20]
 566:src/setup.c   ****   htim_left.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 960              		.loc 1 566 0
 961 00d2 AC61     		str	r4, [r5, #24]
 567:src/setup.c   ****   HAL_TIM_PWM_Init(&htim_left);
 962              		.loc 1 567 0
 963 00d4 2846     		mov	r0, r5
 964 00d6 FFF7FEFF 		bl	HAL_TIM_PWM_Init
 965              	.LVL59:
 568:src/setup.c   **** 
 569:src/setup.c   ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 966              		.loc 1 569 0
 967 00da CDF85880 		str	r8, [sp, #88]
 570:src/setup.c   ****   sMasterConfig.MasterSlaveMode     = TIM_MASTERSLAVEMODE_ENABLE;
 968              		.loc 1 570 0
 969 00de 8023     		movs	r3, #128
 970 00e0 1793     		str	r3, [sp, #92]
 571:src/setup.c   ****   HAL_TIMEx_MasterConfigSynchronization(&htim_left, &sMasterConfig);
 971              		.loc 1 571 0
 972 00e2 16A9     		add	r1, sp, #88
 973 00e4 2846     		mov	r0, r5
 974 00e6 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 975              	.LVL60:
ARM GAS  /tmp/cc9v2zNu.s 			page 28


 572:src/setup.c   **** 
 573:src/setup.c   ****   sTimConfig.InputTrigger = TIM_TS_ITR0;
 976              		.loc 1 573 0
 977 00ea 0494     		str	r4, [sp, #16]
 574:src/setup.c   ****   sTimConfig.SlaveMode    = TIM_SLAVEMODE_GATED;
 978              		.loc 1 574 0
 979 00ec 18A9     		add	r1, sp, #96
 980 00ee 0523     		movs	r3, #5
 981 00f0 41F8543D 		str	r3, [r1, #-84]!
 575:src/setup.c   ****   HAL_TIM_SlaveConfigSynchronization(&htim_left, &sTimConfig);
 982              		.loc 1 575 0
 983 00f4 2846     		mov	r0, r5
 984 00f6 FFF7FEFF 		bl	HAL_TIM_SlaveConfigSynchronization
 985              	.LVL61:
 576:src/setup.c   **** 
 577:src/setup.c   ****   sConfigOC.OCMode       = TIM_OCMODE_PWM1;
 986              		.loc 1 577 0
 987 00fa 6023     		movs	r3, #96
 988 00fc 0F93     		str	r3, [sp, #60]
 578:src/setup.c   ****   sConfigOC.Pulse        = 0;
 989              		.loc 1 578 0
 990 00fe 1094     		str	r4, [sp, #64]
 579:src/setup.c   ****   sConfigOC.OCPolarity   = TIM_OCPOLARITY_HIGH;
 991              		.loc 1 579 0
 992 0100 1194     		str	r4, [sp, #68]
 580:src/setup.c   ****   sConfigOC.OCNPolarity  = TIM_OCNPOLARITY_LOW;
 993              		.loc 1 580 0
 994 0102 1297     		str	r7, [sp, #72]
 581:src/setup.c   ****   sConfigOC.OCFastMode   = TIM_OCFAST_DISABLE;
 995              		.loc 1 581 0
 996 0104 1394     		str	r4, [sp, #76]
 582:src/setup.c   ****   sConfigOC.OCIdleState  = TIM_OCIDLESTATE_RESET;
 997              		.loc 1 582 0
 998 0106 1494     		str	r4, [sp, #80]
 583:src/setup.c   ****   sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 999              		.loc 1 583 0
 1000 0108 4FF40073 		mov	r3, #512
 1001 010c 1593     		str	r3, [sp, #84]
 584:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_left, &sConfigOC, TIM_CHANNEL_1);
 1002              		.loc 1 584 0
 1003 010e 2246     		mov	r2, r4
 1004 0110 0FA9     		add	r1, sp, #60
 1005 0112 2846     		mov	r0, r5
 1006 0114 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1007              	.LVL62:
 585:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_left, &sConfigOC, TIM_CHANNEL_2);
 1008              		.loc 1 585 0
 1009 0118 0422     		movs	r2, #4
 1010 011a 0FA9     		add	r1, sp, #60
 1011 011c 2846     		mov	r0, r5
 1012 011e FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1013              	.LVL63:
 586:src/setup.c   ****   HAL_TIM_PWM_ConfigChannel(&htim_left, &sConfigOC, TIM_CHANNEL_3);
 1014              		.loc 1 586 0
 1015 0122 3A46     		mov	r2, r7
 1016 0124 0FA9     		add	r1, sp, #60
 1017 0126 2846     		mov	r0, r5
ARM GAS  /tmp/cc9v2zNu.s 			page 29


 1018 0128 FFF7FEFF 		bl	HAL_TIM_PWM_ConfigChannel
 1019              	.LVL64:
 587:src/setup.c   **** 
 588:src/setup.c   ****   sBreakDeadTimeConfig.OffStateRunMode  = TIM_OSSR_ENABLE;
 1020              		.loc 1 588 0
 1021 012c 4FF40063 		mov	r3, #2048
 1022 0130 0893     		str	r3, [sp, #32]
 589:src/setup.c   ****   sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 1023              		.loc 1 589 0
 1024 0132 4FF48063 		mov	r3, #1024
 1025 0136 0993     		str	r3, [sp, #36]
 590:src/setup.c   ****   sBreakDeadTimeConfig.LockLevel        = TIM_LOCKLEVEL_OFF;
 1026              		.loc 1 590 0
 1027 0138 0A94     		str	r4, [sp, #40]
 591:src/setup.c   ****   sBreakDeadTimeConfig.DeadTime         = DEAD_TIME;
 1028              		.loc 1 591 0
 1029 013a CDF82C80 		str	r8, [sp, #44]
 592:src/setup.c   ****   sBreakDeadTimeConfig.BreakState       = TIM_BREAK_DISABLE;
 1030              		.loc 1 592 0
 1031 013e 0C94     		str	r4, [sp, #48]
 593:src/setup.c   ****   sBreakDeadTimeConfig.BreakPolarity    = TIM_BREAKPOLARITY_LOW;
 1032              		.loc 1 593 0
 1033 0140 0D94     		str	r4, [sp, #52]
 594:src/setup.c   ****   sBreakDeadTimeConfig.AutomaticOutput  = TIM_AUTOMATICOUTPUT_DISABLE;
 1034              		.loc 1 594 0
 1035 0142 0E94     		str	r4, [sp, #56]
 595:src/setup.c   ****   HAL_TIMEx_ConfigBreakDeadTime(&htim_left, &sBreakDeadTimeConfig);
 1036              		.loc 1 595 0
 1037 0144 0DEB0801 		add	r1, sp, r8
 1038 0148 2846     		mov	r0, r5
 1039 014a FFF7FEFF 		bl	HAL_TIMEx_ConfigBreakDeadTime
 1040              	.LVL65:
 596:src/setup.c   **** 
 597:src/setup.c   ****   LEFT_TIM->BDTR &= ~TIM_BDTR_MOE;
 1041              		.loc 1 597 0
 1042 014e DAF84430 		ldr	r3, [r10, #68]
 1043 0152 23F40043 		bic	r3, r3, #32768
 1044 0156 CAF84430 		str	r3, [r10, #68]
 598:src/setup.c   ****   RIGHT_TIM->BDTR &= ~TIM_BDTR_MOE;
 1045              		.loc 1 598 0
 1046 015a D9F84430 		ldr	r3, [r9, #68]
 1047 015e 23F40043 		bic	r3, r3, #32768
 1048 0162 C9F84430 		str	r3, [r9, #68]
 599:src/setup.c   **** 
 600:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_left, TIM_CHANNEL_1);
 1049              		.loc 1 600 0
 1050 0166 2146     		mov	r1, r4
 1051 0168 2846     		mov	r0, r5
 1052 016a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1053              	.LVL66:
 601:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_left, TIM_CHANNEL_2);
 1054              		.loc 1 601 0
 1055 016e 0421     		movs	r1, #4
 1056 0170 2846     		mov	r0, r5
 1057 0172 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1058              	.LVL67:
 602:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_left, TIM_CHANNEL_3);
ARM GAS  /tmp/cc9v2zNu.s 			page 30


 1059              		.loc 1 602 0
 1060 0176 3946     		mov	r1, r7
 1061 0178 2846     		mov	r0, r5
 1062 017a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1063              	.LVL68:
 603:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_left, TIM_CHANNEL_1);
 1064              		.loc 1 603 0
 1065 017e 2146     		mov	r1, r4
 1066 0180 2846     		mov	r0, r5
 1067 0182 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1068              	.LVL69:
 604:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_left, TIM_CHANNEL_2);
 1069              		.loc 1 604 0
 1070 0186 0421     		movs	r1, #4
 1071 0188 2846     		mov	r0, r5
 1072 018a FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1073              	.LVL70:
 605:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_left, TIM_CHANNEL_3);
 1074              		.loc 1 605 0
 1075 018e 3946     		mov	r1, r7
 1076 0190 2846     		mov	r0, r5
 1077 0192 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1078              	.LVL71:
 606:src/setup.c   **** 
 607:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_right, TIM_CHANNEL_1);
 1079              		.loc 1 607 0
 1080 0196 2146     		mov	r1, r4
 1081 0198 3046     		mov	r0, r6
 1082 019a FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1083              	.LVL72:
 608:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_right, TIM_CHANNEL_2);
 1084              		.loc 1 608 0
 1085 019e 0421     		movs	r1, #4
 1086 01a0 3046     		mov	r0, r6
 1087 01a2 FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1088              	.LVL73:
 609:src/setup.c   ****   HAL_TIM_PWM_Start(&htim_right, TIM_CHANNEL_3);
 1089              		.loc 1 609 0
 1090 01a6 3946     		mov	r1, r7
 1091 01a8 3046     		mov	r0, r6
 1092 01aa FFF7FEFF 		bl	HAL_TIM_PWM_Start
 1093              	.LVL74:
 610:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_right, TIM_CHANNEL_1);
 1094              		.loc 1 610 0
 1095 01ae 2146     		mov	r1, r4
 1096 01b0 3046     		mov	r0, r6
 1097 01b2 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1098              	.LVL75:
 611:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_right, TIM_CHANNEL_2);
 1099              		.loc 1 611 0
 1100 01b6 0421     		movs	r1, #4
 1101 01b8 3046     		mov	r0, r6
 1102 01ba FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1103              	.LVL76:
 612:src/setup.c   ****   HAL_TIMEx_PWMN_Start(&htim_right, TIM_CHANNEL_3);
 1104              		.loc 1 612 0
 1105 01be 3946     		mov	r1, r7
ARM GAS  /tmp/cc9v2zNu.s 			page 31


 1106 01c0 3046     		mov	r0, r6
 1107 01c2 FFF7FEFF 		bl	HAL_TIMEx_PWMN_Start
 1108              	.LVL77:
 613:src/setup.c   **** 
 614:src/setup.c   ****   htim_left.Instance->RCR = 1;
 1109              		.loc 1 614 0
 1110 01c6 2B68     		ldr	r3, [r5]
 1111 01c8 0122     		movs	r2, #1
 1112 01ca 1A63     		str	r2, [r3, #48]
 615:src/setup.c   **** 
 616:src/setup.c   ****   __HAL_TIM_ENABLE(&htim_right);
 1113              		.loc 1 616 0
 1114 01cc 3268     		ldr	r2, [r6]
 1115 01ce 1368     		ldr	r3, [r2]
 1116 01d0 43F00103 		orr	r3, r3, #1
 1117 01d4 1360     		str	r3, [r2]
 617:src/setup.c   **** }
 1118              		.loc 1 617 0
 1119 01d6 19B0     		add	sp, sp, #100
 1120              	.LCFI11:
 1121              		.cfi_def_cfa_offset 36
 1122              		@ sp needed
 1123 01d8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1124              	.L16:
 1125              		.align	2
 1126              	.L15:
 1127 01dc 00100240 		.word	1073876992
 1128 01e0 00000000 		.word	htim_right
 1129 01e4 00000000 		.word	htim_left
 1130 01e8 002C0140 		.word	1073818624
 1131 01ec 00340140 		.word	1073820672
 1132              		.cfi_endproc
 1133              	.LFE69:
 1135              		.section	.text.MX_ADC1_Init,"ax",%progbits
 1136              		.align	1
 1137              		.global	MX_ADC1_Init
 1138              		.syntax unified
 1139              		.thumb
 1140              		.thumb_func
 1141              		.fpu softvfp
 1143              	MX_ADC1_Init:
 1144              	.LFB70:
 618:src/setup.c   **** 
 619:src/setup.c   **** void MX_ADC1_Init(void) {
 1145              		.loc 1 619 0
 1146              		.cfi_startproc
 1147              		@ args = 0, pretend = 0, frame = 24
 1148              		@ frame_needed = 0, uses_anonymous_args = 0
 1149 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1150              	.LCFI12:
 1151              		.cfi_def_cfa_offset 24
 1152              		.cfi_offset 4, -24
 1153              		.cfi_offset 5, -20
 1154              		.cfi_offset 6, -16
 1155              		.cfi_offset 7, -12
 1156              		.cfi_offset 8, -8
 1157              		.cfi_offset 14, -4
ARM GAS  /tmp/cc9v2zNu.s 			page 32


 1158 0004 86B0     		sub	sp, sp, #24
 1159              	.LCFI13:
 1160              		.cfi_def_cfa_offset 48
 1161              	.LBB15:
 620:src/setup.c   ****   ADC_MultiModeTypeDef multimode;
 621:src/setup.c   ****   ADC_ChannelConfTypeDef sConfig;
 622:src/setup.c   **** 
 623:src/setup.c   ****   __HAL_RCC_ADC1_CLK_ENABLE();
 1162              		.loc 1 623 0
 1163 0006 424E     		ldr	r6, .L19
 1164 0008 B369     		ldr	r3, [r6, #24]
 1165 000a 43F40073 		orr	r3, r3, #512
 1166 000e B361     		str	r3, [r6, #24]
 1167 0010 B369     		ldr	r3, [r6, #24]
 1168 0012 03F40073 		and	r3, r3, #512
 1169 0016 0093     		str	r3, [sp]
 1170 0018 009B     		ldr	r3, [sp]
 1171              	.LBE15:
 624:src/setup.c   **** 
 625:src/setup.c   ****   hadc1.Instance                   = ADC1;
 1172              		.loc 1 625 0
 1173 001a 3E4C     		ldr	r4, .L19+4
 1174 001c 3E4B     		ldr	r3, .L19+8
 1175 001e 2360     		str	r3, [r4]
 626:src/setup.c   ****   hadc1.Init.ScanConvMode          = ADC_SCAN_ENABLE;
 1176              		.loc 1 626 0
 1177 0020 4FF48073 		mov	r3, #256
 1178 0024 A360     		str	r3, [r4, #8]
 627:src/setup.c   ****   hadc1.Init.ContinuousConvMode    = DISABLE;
 1179              		.loc 1 627 0
 1180 0026 0025     		movs	r5, #0
 1181 0028 E560     		str	r5, [r4, #12]
 628:src/setup.c   ****   hadc1.Init.DiscontinuousConvMode = DISABLE;
 1182              		.loc 1 628 0
 1183 002a 6561     		str	r5, [r4, #20]
 629:src/setup.c   ****   hadc1.Init.ExternalTrigConv      = ADC_EXTERNALTRIGCONV_T8_TRGO;
 1184              		.loc 1 629 0
 1185 002c 4FF44023 		mov	r3, #786432
 1186 0030 E361     		str	r3, [r4, #28]
 630:src/setup.c   ****   hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 1187              		.loc 1 630 0
 1188 0032 6560     		str	r5, [r4, #4]
 631:src/setup.c   ****   hadc1.Init.NbrOfConversion       = 5;
 1189              		.loc 1 631 0
 1190 0034 4FF00508 		mov	r8, #5
 1191 0038 C4F81080 		str	r8, [r4, #16]
 632:src/setup.c   ****   HAL_ADC_Init(&hadc1);
 1192              		.loc 1 632 0
 1193 003c 2046     		mov	r0, r4
 1194 003e FFF7FEFF 		bl	HAL_ADC_Init
 1195              	.LVL78:
 633:src/setup.c   ****   /**Enable or disable the remapping of ADC1_ETRGREG:
 634:src/setup.c   ****     * ADC1 External Event regular conversion is connected to TIM8 TRG0
 635:src/setup.c   ****     */
 636:src/setup.c   ****   __HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE();
 1196              		.loc 1 636 0
 1197 0042 364A     		ldr	r2, .L19+12
ARM GAS  /tmp/cc9v2zNu.s 			page 33


 1198 0044 5368     		ldr	r3, [r2, #4]
 1199 0046 43F48023 		orr	r3, r3, #262144
 1200 004a 5360     		str	r3, [r2, #4]
 637:src/setup.c   **** 
 638:src/setup.c   ****   /**Configure the ADC multi-mode
 639:src/setup.c   ****     */
 640:src/setup.c   ****   multimode.Mode = ADC_DUALMODE_REGSIMULT;
 1201              		.loc 1 640 0
 1202 004c 06A9     		add	r1, sp, #24
 1203 004e 4FF4C023 		mov	r3, #393216
 1204 0052 41F8043D 		str	r3, [r1, #-4]!
 641:src/setup.c   ****   HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode);
 1205              		.loc 1 641 0
 1206 0056 2046     		mov	r0, r4
 1207 0058 FFF7FEFF 		bl	HAL_ADCEx_MultiModeConfigChannel
 1208              	.LVL79:
 642:src/setup.c   **** 
 643:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 1209              		.loc 1 643 0
 1210 005c 0123     		movs	r3, #1
 1211 005e 0493     		str	r3, [sp, #16]
 644:src/setup.c   **** 
 645:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_14;  // pc4 left b
 1212              		.loc 1 645 0
 1213 0060 0E22     		movs	r2, #14
 1214 0062 0292     		str	r2, [sp, #8]
 646:src/setup.c   ****   sConfig.Rank    = 1;
 1215              		.loc 1 646 0
 1216 0064 0393     		str	r3, [sp, #12]
 647:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 1217              		.loc 1 647 0
 1218 0066 02A9     		add	r1, sp, #8
 1219 0068 2046     		mov	r0, r4
 1220 006a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1221              	.LVL80:
 648:src/setup.c   **** 
 649:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_0;  // pa0 right a
 1222              		.loc 1 649 0
 1223 006e 0295     		str	r5, [sp, #8]
 650:src/setup.c   ****   sConfig.Rank    = 2;
 1224              		.loc 1 650 0
 1225 0070 0227     		movs	r7, #2
 1226 0072 0397     		str	r7, [sp, #12]
 651:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 1227              		.loc 1 651 0
 1228 0074 02A9     		add	r1, sp, #8
 1229 0076 2046     		mov	r0, r4
 1230 0078 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1231              	.LVL81:
 652:src/setup.c   **** 
 653:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 1232              		.loc 1 653 0
 1233 007c 0497     		str	r7, [sp, #16]
 654:src/setup.c   **** 
 655:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_11;  // pc1 left cur
 1234              		.loc 1 655 0
 1235 007e 0B27     		movs	r7, #11
ARM GAS  /tmp/cc9v2zNu.s 			page 34


 1236 0080 0297     		str	r7, [sp, #8]
 656:src/setup.c   ****   sConfig.Rank    = 3;
 1237              		.loc 1 656 0
 1238 0082 0323     		movs	r3, #3
 1239 0084 0393     		str	r3, [sp, #12]
 657:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 1240              		.loc 1 657 0
 1241 0086 02A9     		add	r1, sp, #8
 1242 0088 2046     		mov	r0, r4
 1243 008a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1244              	.LVL82:
 658:src/setup.c   **** 
 659:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_12;  // pc2 vbat
 1245              		.loc 1 659 0
 1246 008e 0C23     		movs	r3, #12
 1247 0090 0293     		str	r3, [sp, #8]
 660:src/setup.c   ****   sConfig.Rank    = 4;
 1248              		.loc 1 660 0
 1249 0092 0423     		movs	r3, #4
 1250 0094 0393     		str	r3, [sp, #12]
 661:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 1251              		.loc 1 661 0
 1252 0096 02A9     		add	r1, sp, #8
 1253 0098 2046     		mov	r0, r4
 1254 009a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1255              	.LVL83:
 662:src/setup.c   **** 
 663:src/setup.c   ****   //temperature requires at least 17.1uS sampling time
 664:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 1256              		.loc 1 664 0
 1257 009e 0723     		movs	r3, #7
 1258 00a0 0493     		str	r3, [sp, #16]
 665:src/setup.c   **** 
 666:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;  // internal temp
 1259              		.loc 1 666 0
 1260 00a2 1023     		movs	r3, #16
 1261 00a4 0293     		str	r3, [sp, #8]
 667:src/setup.c   ****   sConfig.Rank    = 5;
 1262              		.loc 1 667 0
 1263 00a6 CDF80C80 		str	r8, [sp, #12]
 668:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 1264              		.loc 1 668 0
 1265 00aa 02A9     		add	r1, sp, #8
 1266 00ac 2046     		mov	r0, r4
 1267 00ae FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1268              	.LVL84:
 669:src/setup.c   **** 
 670:src/setup.c   ****   hadc1.Instance->CR2 |= ADC_CR2_DMA | ADC_CR2_TSVREFE;
 1269              		.loc 1 670 0
 1270 00b2 2268     		ldr	r2, [r4]
 1271 00b4 9368     		ldr	r3, [r2, #8]
 1272 00b6 43F40003 		orr	r3, r3, #8388608
 1273 00ba 43F48073 		orr	r3, r3, #256
 1274 00be 9360     		str	r3, [r2, #8]
 671:src/setup.c   **** 
 672:src/setup.c   ****   __HAL_ADC_ENABLE(&hadc1);
 1275              		.loc 1 672 0
ARM GAS  /tmp/cc9v2zNu.s 			page 35


 1276 00c0 9368     		ldr	r3, [r2, #8]
 1277 00c2 43F00103 		orr	r3, r3, #1
 1278 00c6 9360     		str	r3, [r2, #8]
 1279              	.LBB16:
 673:src/setup.c   **** 
 674:src/setup.c   ****   __HAL_RCC_DMA1_CLK_ENABLE();
 1280              		.loc 1 674 0
 1281 00c8 7369     		ldr	r3, [r6, #20]
 1282 00ca 43F00103 		orr	r3, r3, #1
 1283 00ce 7361     		str	r3, [r6, #20]
 1284 00d0 7369     		ldr	r3, [r6, #20]
 1285 00d2 03F00103 		and	r3, r3, #1
 1286 00d6 0193     		str	r3, [sp, #4]
 1287 00d8 019B     		ldr	r3, [sp, #4]
 1288              	.LBE16:
 675:src/setup.c   **** 
 676:src/setup.c   ****   DMA1_Channel1->CCR   = 0;
 1289              		.loc 1 676 0
 1290 00da 114B     		ldr	r3, .L19+16
 1291 00dc 1D60     		str	r5, [r3]
 677:src/setup.c   ****   DMA1_Channel1->CNDTR = 5;
 1292              		.loc 1 677 0
 1293 00de C3F80480 		str	r8, [r3, #4]
 678:src/setup.c   ****   DMA1_Channel1->CPAR  = (uint32_t) & (ADC1->DR);
 1294              		.loc 1 678 0
 1295 00e2 104A     		ldr	r2, .L19+20
 1296 00e4 9A60     		str	r2, [r3, #8]
 679:src/setup.c   ****   DMA1_Channel1->CMAR  = (uint32_t)&adc_buffer;
 1297              		.loc 1 679 0
 1298 00e6 104A     		ldr	r2, .L19+24
 1299 00e8 DA60     		str	r2, [r3, #12]
 680:src/setup.c   ****   DMA1_Channel1->CCR   = DMA_CCR_MSIZE_1 | DMA_CCR_PSIZE_1 | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_
 1300              		.loc 1 680 0
 1301 00ea 40F6A222 		movw	r2, #2722
 1302 00ee 1A60     		str	r2, [r3]
 681:src/setup.c   ****   DMA1_Channel1->CCR |= DMA_CCR_EN;
 1303              		.loc 1 681 0
 1304 00f0 1A68     		ldr	r2, [r3]
 1305 00f2 42F00102 		orr	r2, r2, #1
 1306 00f6 1A60     		str	r2, [r3]
 682:src/setup.c   **** 
 683:src/setup.c   ****   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 1307              		.loc 1 683 0
 1308 00f8 2A46     		mov	r2, r5
 1309 00fa 2946     		mov	r1, r5
 1310 00fc 3846     		mov	r0, r7
 1311 00fe FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1312              	.LVL85:
 684:src/setup.c   ****   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 1313              		.loc 1 684 0
 1314 0102 3846     		mov	r0, r7
 1315 0104 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1316              	.LVL86:
 685:src/setup.c   **** }
 1317              		.loc 1 685 0
 1318 0108 06B0     		add	sp, sp, #24
 1319              	.LCFI14:
ARM GAS  /tmp/cc9v2zNu.s 			page 36


 1320              		.cfi_def_cfa_offset 24
 1321              		@ sp needed
 1322 010a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1323              	.L20:
 1324 010e 00BF     		.align	2
 1325              	.L19:
 1326 0110 00100240 		.word	1073876992
 1327 0114 00000000 		.word	hadc1
 1328 0118 00240140 		.word	1073816576
 1329 011c 00000140 		.word	1073807360
 1330 0120 08000240 		.word	1073872904
 1331 0124 4C240140 		.word	1073816652
 1332 0128 00000000 		.word	adc_buffer
 1333              		.cfi_endproc
 1334              	.LFE70:
 1336              		.section	.text.MX_ADC2_Init,"ax",%progbits
 1337              		.align	1
 1338              		.global	MX_ADC2_Init
 1339              		.syntax unified
 1340              		.thumb
 1341              		.thumb_func
 1342              		.fpu softvfp
 1344              	MX_ADC2_Init:
 1345              	.LFB71:
 686:src/setup.c   **** 
 687:src/setup.c   **** /* ADC2 init function */
 688:src/setup.c   **** void MX_ADC2_Init(void) {
 1346              		.loc 1 688 0
 1347              		.cfi_startproc
 1348              		@ args = 0, pretend = 0, frame = 16
 1349              		@ frame_needed = 0, uses_anonymous_args = 0
 1350 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1351              	.LCFI15:
 1352              		.cfi_def_cfa_offset 20
 1353              		.cfi_offset 4, -20
 1354              		.cfi_offset 5, -16
 1355              		.cfi_offset 6, -12
 1356              		.cfi_offset 7, -8
 1357              		.cfi_offset 14, -4
 1358 0002 85B0     		sub	sp, sp, #20
 1359              	.LCFI16:
 1360              		.cfi_def_cfa_offset 40
 1361              	.LBB17:
 689:src/setup.c   ****   ADC_ChannelConfTypeDef sConfig;
 690:src/setup.c   **** 
 691:src/setup.c   ****   __HAL_RCC_ADC2_CLK_ENABLE();
 1362              		.loc 1 691 0
 1363 0004 284B     		ldr	r3, .L23
 1364 0006 9A69     		ldr	r2, [r3, #24]
 1365 0008 42F48062 		orr	r2, r2, #1024
 1366 000c 9A61     		str	r2, [r3, #24]
 1367 000e 9B69     		ldr	r3, [r3, #24]
 1368 0010 03F48063 		and	r3, r3, #1024
 1369 0014 0093     		str	r3, [sp]
 1370 0016 009B     		ldr	r3, [sp]
 1371              	.LBE17:
 692:src/setup.c   **** 
ARM GAS  /tmp/cc9v2zNu.s 			page 37


 693:src/setup.c   ****   // HAL_ADC_DeInit(&hadc2);
 694:src/setup.c   ****   // hadc2.Instance->CR2 = 0;
 695:src/setup.c   ****   /**Common config
 696:src/setup.c   ****     */
 697:src/setup.c   ****   hadc2.Instance                   = ADC2;
 1372              		.loc 1 697 0
 1373 0018 244C     		ldr	r4, .L23+4
 1374 001a 254B     		ldr	r3, .L23+8
 1375 001c 2360     		str	r3, [r4]
 698:src/setup.c   ****   hadc2.Init.ScanConvMode          = ADC_SCAN_ENABLE;
 1376              		.loc 1 698 0
 1377 001e 4FF48073 		mov	r3, #256
 1378 0022 A360     		str	r3, [r4, #8]
 699:src/setup.c   ****   hadc2.Init.ContinuousConvMode    = DISABLE;
 1379              		.loc 1 699 0
 1380 0024 0023     		movs	r3, #0
 1381 0026 E360     		str	r3, [r4, #12]
 700:src/setup.c   ****   hadc2.Init.DiscontinuousConvMode = DISABLE;
 1382              		.loc 1 700 0
 1383 0028 6361     		str	r3, [r4, #20]
 701:src/setup.c   ****   hadc2.Init.ExternalTrigConv      = ADC_SOFTWARE_START;
 1384              		.loc 1 701 0
 1385 002a 4FF46022 		mov	r2, #917504
 1386 002e E261     		str	r2, [r4, #28]
 702:src/setup.c   ****   hadc2.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 1387              		.loc 1 702 0
 1388 0030 6360     		str	r3, [r4, #4]
 703:src/setup.c   ****   hadc2.Init.NbrOfConversion       = 5;
 1389              		.loc 1 703 0
 1390 0032 0526     		movs	r6, #5
 1391 0034 2661     		str	r6, [r4, #16]
 704:src/setup.c   ****   HAL_ADC_Init(&hadc2);
 1392              		.loc 1 704 0
 1393 0036 2046     		mov	r0, r4
 1394 0038 FFF7FEFF 		bl	HAL_ADC_Init
 1395              	.LVL87:
 705:src/setup.c   **** 
 706:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 1396              		.loc 1 706 0
 1397 003c 0123     		movs	r3, #1
 1398 003e 0393     		str	r3, [sp, #12]
 707:src/setup.c   **** 
 708:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_15;  // pc5 left c
 1399              		.loc 1 708 0
 1400 0040 0F22     		movs	r2, #15
 1401 0042 0192     		str	r2, [sp, #4]
 709:src/setup.c   ****   sConfig.Rank    = 1;
 1402              		.loc 1 709 0
 1403 0044 0293     		str	r3, [sp, #8]
 710:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 1404              		.loc 1 710 0
 1405 0046 01A9     		add	r1, sp, #4
 1406 0048 2046     		mov	r0, r4
 1407 004a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1408              	.LVL88:
 711:src/setup.c   **** 
 712:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_13;  // pc3 right b
ARM GAS  /tmp/cc9v2zNu.s 			page 38


 1409              		.loc 1 712 0
 1410 004e 0D23     		movs	r3, #13
 1411 0050 0193     		str	r3, [sp, #4]
 713:src/setup.c   ****   sConfig.Rank    = 2;
 1412              		.loc 1 713 0
 1413 0052 0225     		movs	r5, #2
 1414 0054 0295     		str	r5, [sp, #8]
 714:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 1415              		.loc 1 714 0
 1416 0056 01A9     		add	r1, sp, #4
 1417 0058 2046     		mov	r0, r4
 1418 005a FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1419              	.LVL89:
 715:src/setup.c   **** 
 716:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 1420              		.loc 1 716 0
 1421 005e 0395     		str	r5, [sp, #12]
 717:src/setup.c   **** 
 718:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_10;  // pc0 right cur
 1422              		.loc 1 718 0
 1423 0060 0A23     		movs	r3, #10
 1424 0062 0193     		str	r3, [sp, #4]
 719:src/setup.c   ****   sConfig.Rank    = 3;
 1425              		.loc 1 719 0
 1426 0064 0327     		movs	r7, #3
 1427 0066 0297     		str	r7, [sp, #8]
 720:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 1428              		.loc 1 720 0
 1429 0068 01A9     		add	r1, sp, #4
 1430 006a 2046     		mov	r0, r4
 1431 006c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1432              	.LVL90:
 721:src/setup.c   **** 
 722:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_2;  // pa2 uart-l-tx
 1433              		.loc 1 722 0
 1434 0070 0195     		str	r5, [sp, #4]
 723:src/setup.c   ****   sConfig.Rank    = 4;
 1435              		.loc 1 723 0
 1436 0072 0423     		movs	r3, #4
 1437 0074 0293     		str	r3, [sp, #8]
 724:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 1438              		.loc 1 724 0
 1439 0076 0DEB0301 		add	r1, sp, r3
 1440 007a 2046     		mov	r0, r4
 1441 007c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1442              	.LVL91:
 725:src/setup.c   **** 
 726:src/setup.c   ****   sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 1443              		.loc 1 726 0
 1444 0080 0723     		movs	r3, #7
 1445 0082 0393     		str	r3, [sp, #12]
 727:src/setup.c   **** 
 728:src/setup.c   ****   sConfig.Channel = ADC_CHANNEL_3;  // pa3 uart-l-rx
 1446              		.loc 1 728 0
 1447 0084 0197     		str	r7, [sp, #4]
 729:src/setup.c   ****   sConfig.Rank    = 5;
 1448              		.loc 1 729 0
ARM GAS  /tmp/cc9v2zNu.s 			page 39


 1449 0086 0296     		str	r6, [sp, #8]
 730:src/setup.c   ****   HAL_ADC_ConfigChannel(&hadc2, &sConfig);
 1450              		.loc 1 730 0
 1451 0088 01A9     		add	r1, sp, #4
 1452 008a 2046     		mov	r0, r4
 1453 008c FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 1454              	.LVL92:
 731:src/setup.c   **** 
 732:src/setup.c   ****   hadc2.Instance->CR2 |= ADC_CR2_DMA;
 1455              		.loc 1 732 0
 1456 0090 2368     		ldr	r3, [r4]
 1457 0092 9A68     		ldr	r2, [r3, #8]
 1458 0094 42F48072 		orr	r2, r2, #256
 1459 0098 9A60     		str	r2, [r3, #8]
 733:src/setup.c   ****   __HAL_ADC_ENABLE(&hadc2);
 1460              		.loc 1 733 0
 1461 009a 9A68     		ldr	r2, [r3, #8]
 1462 009c 42F00102 		orr	r2, r2, #1
 1463 00a0 9A60     		str	r2, [r3, #8]
 734:src/setup.c   **** }
 1464              		.loc 1 734 0
 1465 00a2 05B0     		add	sp, sp, #20
 1466              	.LCFI17:
 1467              		.cfi_def_cfa_offset 20
 1468              		@ sp needed
 1469 00a4 F0BD     		pop	{r4, r5, r6, r7, pc}
 1470              	.L24:
 1471 00a6 00BF     		.align	2
 1472              	.L23:
 1473 00a8 00100240 		.word	1073876992
 1474 00ac 00000000 		.word	hadc2
 1475 00b0 00280140 		.word	1073817600
 1476              		.cfi_endproc
 1477              	.LFE71:
 1479              		.section	.text._Error_Handler,"ax",%progbits
 1480              		.align	1
 1481              		.global	_Error_Handler
 1482              		.syntax unified
 1483              		.thumb
 1484              		.thumb_func
 1485              		.fpu softvfp
 1487              	_Error_Handler:
 1488              	.LFB72:
 735:src/setup.c   **** 
 736:src/setup.c   **** 
 737:src/setup.c   **** /**
 738:src/setup.c   ****   * @brief  This function is executed in case of error occurrence.
 739:src/setup.c   ****   * @param  file: The file name as string.
 740:src/setup.c   ****   * @param  line: The line in file as a number.
 741:src/setup.c   ****   * @retval None
 742:src/setup.c   ****   */
 743:src/setup.c   **** void _Error_Handler(char *file, int line)
 744:src/setup.c   **** {
 1489              		.loc 1 744 0
 1490              		.cfi_startproc
 1491              		@ Volatile: function does not return.
 1492              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc9v2zNu.s 			page 40


 1493              		@ frame_needed = 0, uses_anonymous_args = 0
 1494              		@ link register save eliminated.
 1495              	.LVL93:
 1496              	.L26:
 1497 0000 FEE7     		b	.L26
 1498              		.cfi_endproc
 1499              	.LFE72:
 1501              		.section	.text.MX_TIM3_Softwatchdog_Init,"ax",%progbits
 1502              		.align	1
 1503              		.global	MX_TIM3_Softwatchdog_Init
 1504              		.syntax unified
 1505              		.thumb
 1506              		.thumb_func
 1507              		.fpu softvfp
 1509              	MX_TIM3_Softwatchdog_Init:
 1510              	.LFB73:
 745:src/setup.c   ****   /* USER CODE BEGIN Error_Handler_Debug */
 746:src/setup.c   ****   /* User can add his own implementation to report the HAL error return state */
 747:src/setup.c   ****   while(1)
 748:src/setup.c   ****   {
 749:src/setup.c   ****   }
 750:src/setup.c   ****   /* USER CODE END Error_Handler_Debug */
 751:src/setup.c   **** }
 752:src/setup.c   **** 
 753:src/setup.c   **** #ifdef SOFTWATCHDOG_TIMEOUT
 754:src/setup.c   **** /* TIM3 init function */
 755:src/setup.c   **** void MX_TIM3_Softwatchdog_Init(void)
 756:src/setup.c   **** {
 1511              		.loc 1 756 0
 1512              		.cfi_startproc
 1513              		@ args = 0, pretend = 0, frame = 32
 1514              		@ frame_needed = 0, uses_anonymous_args = 0
 1515              		.loc 1 756 0
 1516 0000 00B5     		push	{lr}
 1517              	.LCFI18:
 1518              		.cfi_def_cfa_offset 4
 1519              		.cfi_offset 14, -4
 1520 0002 89B0     		sub	sp, sp, #36
 1521              	.LCFI19:
 1522              		.cfi_def_cfa_offset 40
 757:src/setup.c   ****   HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 1523              		.loc 1 757 0
 1524 0004 0022     		movs	r2, #0
 1525 0006 1146     		mov	r1, r2
 1526 0008 1D20     		movs	r0, #29
 1527 000a FFF7FEFF 		bl	HAL_NVIC_SetPriority
 1528              	.LVL94:
 758:src/setup.c   ****   HAL_NVIC_EnableIRQ(TIM3_IRQn);
 1529              		.loc 1 758 0
 1530 000e 1D20     		movs	r0, #29
 1531 0010 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 1532              	.LVL95:
 1533              	.LBB18:
 759:src/setup.c   ****   __HAL_RCC_TIM3_CLK_ENABLE();
 1534              		.loc 1 759 0
 1535 0014 1F4B     		ldr	r3, .L35
 1536 0016 DA69     		ldr	r2, [r3, #28]
ARM GAS  /tmp/cc9v2zNu.s 			page 41


 1537 0018 42F00202 		orr	r2, r2, #2
 1538 001c DA61     		str	r2, [r3, #28]
 1539 001e DB69     		ldr	r3, [r3, #28]
 1540 0020 03F00203 		and	r3, r3, #2
 1541 0024 0193     		str	r3, [sp, #4]
 1542 0026 019B     		ldr	r3, [sp, #4]
 1543              	.LBE18:
 760:src/setup.c   **** 
 761:src/setup.c   ****   TIM_ClockConfigTypeDef sClockSourceConfig;
 762:src/setup.c   ****   TIM_MasterConfigTypeDef sMasterConfig;
 763:src/setup.c   **** 
 764:src/setup.c   ****   htim3.Instance = TIM3;                                   // Timer 3 is connected to APB1 clock li
 1544              		.loc 1 764 0
 1545 0028 1B48     		ldr	r0, .L35+4
 1546 002a 1C4B     		ldr	r3, .L35+8
 1547 002c 0360     		str	r3, [r0]
 765:src/setup.c   ****   htim3.Init.Prescaler = 64000-1;                          // Therefore 64,000,000 Hz / 64,000 = 10
 1548              		.loc 1 765 0
 1549 002e 4FF6FF13 		movw	r3, #63999
 1550 0032 4360     		str	r3, [r0, #4]
 766:src/setup.c   ****   htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 1551              		.loc 1 766 0
 1552 0034 0023     		movs	r3, #0
 1553 0036 8360     		str	r3, [r0, #8]
 767:src/setup.c   ****   htim3.Init.Period = SOFTWATCHDOG_TIMEOUT;                                 // Trigger every 100ms
 1554              		.loc 1 767 0
 1555 0038 6422     		movs	r2, #100
 1556 003a C260     		str	r2, [r0, #12]
 768:src/setup.c   ****   htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1557              		.loc 1 768 0
 1558 003c 0361     		str	r3, [r0, #16]
 769:src/setup.c   ****   htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 1559              		.loc 1 769 0
 1560 003e 8361     		str	r3, [r0, #24]
 770:src/setup.c   ****   if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 1561              		.loc 1 770 0
 1562 0040 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1563              	.LVL96:
 1564 0044 B0B9     		cbnz	r0, .L32
 771:src/setup.c   ****   {
 772:src/setup.c   ****     _Error_Handler(__FILE__, __LINE__);
 773:src/setup.c   ****   }
 774:src/setup.c   **** 
 775:src/setup.c   ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 1565              		.loc 1 775 0
 1566 0046 08A9     		add	r1, sp, #32
 1567 0048 4FF48053 		mov	r3, #4096
 1568 004c 41F8103D 		str	r3, [r1, #-16]!
 776:src/setup.c   ****   if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 1569              		.loc 1 776 0
 1570 0050 1148     		ldr	r0, .L35+4
 1571 0052 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1572              	.LVL97:
 1573 0056 90B9     		cbnz	r0, .L33
 777:src/setup.c   ****   {
 778:src/setup.c   ****     _Error_Handler(__FILE__, __LINE__);
 779:src/setup.c   ****   }
ARM GAS  /tmp/cc9v2zNu.s 			page 42


 780:src/setup.c   **** 
 781:src/setup.c   ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 1574              		.loc 1 781 0
 1575 0058 0023     		movs	r3, #0
 1576 005a 0293     		str	r3, [sp, #8]
 782:src/setup.c   ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1577              		.loc 1 782 0
 1578 005c 0393     		str	r3, [sp, #12]
 783:src/setup.c   ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 1579              		.loc 1 783 0
 1580 005e 02A9     		add	r1, sp, #8
 1581 0060 0D48     		ldr	r0, .L35+4
 1582 0062 FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1583              	.LVL98:
 1584 0066 78B9     		cbnz	r0, .L34
 784:src/setup.c   ****   {
 785:src/setup.c   ****     _Error_Handler(__FILE__, __LINE__);
 786:src/setup.c   ****   }
 787:src/setup.c   **** 
 788:src/setup.c   ****   HAL_TIM_Base_Start_IT(&htim3);
 1585              		.loc 1 788 0
 1586 0068 0B48     		ldr	r0, .L35+4
 1587 006a FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1588              	.LVL99:
 789:src/setup.c   **** }
 1589              		.loc 1 789 0
 1590 006e 09B0     		add	sp, sp, #36
 1591              	.LCFI20:
 1592              		.cfi_remember_state
 1593              		.cfi_def_cfa_offset 4
 1594              		@ sp needed
 1595 0070 5DF804FB 		ldr	pc, [sp], #4
 1596              	.L32:
 1597              	.LCFI21:
 1598              		.cfi_restore_state
 772:src/setup.c   ****   }
 1599              		.loc 1 772 0
 1600 0074 4FF44171 		mov	r1, #772
 1601 0078 0948     		ldr	r0, .L35+12
 1602 007a FFF7FEFF 		bl	_Error_Handler
 1603              	.LVL100:
 1604              	.L33:
 778:src/setup.c   ****   }
 1605              		.loc 1 778 0
 1606 007e 40F20A31 		movw	r1, #778
 1607 0082 0748     		ldr	r0, .L35+12
 1608 0084 FFF7FEFF 		bl	_Error_Handler
 1609              	.LVL101:
 1610              	.L34:
 785:src/setup.c   ****   }
 1611              		.loc 1 785 0
 1612 0088 40F21131 		movw	r1, #785
 1613 008c 0448     		ldr	r0, .L35+12
 1614 008e FFF7FEFF 		bl	_Error_Handler
 1615              	.LVL102:
 1616              	.L36:
 1617 0092 00BF     		.align	2
ARM GAS  /tmp/cc9v2zNu.s 			page 43


 1618              	.L35:
 1619 0094 00100240 		.word	1073876992
 1620 0098 00000000 		.word	htim3
 1621 009c 00040040 		.word	1073742848
 1622 00a0 00000000 		.word	.LC0
 1623              		.cfi_endproc
 1624              	.LFE73:
 1626              		.comm	hdma_i2c2_tx,68,4
 1627              		.comm	hdma_i2c2_rx,68,4
 1628              		.comm	adc_buffer,20,4
 1629              		.comm	hdma_usart3_tx,68,4
 1630              		.comm	hdma_usart3_rx,68,4
 1631              		.comm	hdma_usart2_tx,68,4
 1632              		.comm	hdma_usart2_rx,68,4
 1633              		.comm	huart3,64,4
 1634              		.comm	huart2,64,4
 1635              		.comm	hi2c2,84,4
 1636              		.comm	hadc2,48,4
 1637              		.comm	hadc1,48,4
 1638              		.comm	htim3,64,4
 1639              		.comm	htim_left,64,4
 1640              		.comm	htim_right,64,4
 1641              		.section	.rodata.MX_TIM3_Softwatchdog_Init.str1.4,"aMS",%progbits,1
 1642              		.align	2
 1643              	.LC0:
 1644 0000 7372632F 		.ascii	"src/setup.c\000"
 1644      73657475 
 1644      702E6300 
 1645              		.text
 1646              	.Letext0:
 1647              		.file 2 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1648              		.file 3 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1649              		.file 4 "Drivers/CMSIS/Include/core_cm3.h"
 1650              		.file 5 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/system_stm32f1xx.h"
 1651              		.file 6 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f103xe.h"
 1652              		.file 7 "Drivers/CMSIS/Device/ST/STM32F1xx/Include/stm32f1xx.h"
 1653              		.file 8 "/usr/arm-none-eabi/include/sys/lock.h"
 1654              		.file 9 "/usr/arm-none-eabi/include/sys/_types.h"
 1655              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 1656              		.file 11 "/usr/arm-none-eabi/include/sys/reent.h"
 1657              		.file 12 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_def.h"
 1658              		.file 13 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_gpio.h"
 1659              		.file 14 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_dma.h"
 1660              		.file 15 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc.h"
 1661              		.file 16 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_adc_ex.h"
 1662              		.file 17 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_i2c.h"
 1663              		.file 18 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim.h"
 1664              		.file 19 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_tim_ex.h"
 1665              		.file 20 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_uart.h"
 1666              		.file 21 "inc/defines.h"
 1667              		.file 22 "Drivers/STM32F1xx_HAL_Driver/Inc/stm32f1xx_hal_cortex.h"
ARM GAS  /tmp/cc9v2zNu.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 setup.c
     /tmp/cc9v2zNu.s:16     .text.UART2_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:23     .text.UART2_Init:0000000000000000 UART2_Init
     /tmp/cc9v2zNu.s:221    .text.UART2_Init:0000000000000110 $d
                            *COM*:0000000000000040 huart2
                            *COM*:0000000000000044 hdma_usart2_rx
                            *COM*:0000000000000044 hdma_usart2_tx
     /tmp/cc9v2zNu.s:234    .text.I2C_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:241    .text.I2C_Init:0000000000000000 I2C_Init
     /tmp/cc9v2zNu.s:456    .text.I2C_Init:0000000000000130 $d
                            *COM*:0000000000000054 hi2c2
                            *COM*:0000000000000044 hdma_i2c2_rx
                            *COM*:0000000000000044 hdma_i2c2_tx
     /tmp/cc9v2zNu.s:469    .text.MX_GPIO_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:476    .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
     /tmp/cc9v2zNu.s:799    .text.MX_GPIO_Init:0000000000000228 $d
     /tmp/cc9v2zNu.s:808    .text.MX_TIM_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:815    .text.MX_TIM_Init:0000000000000000 MX_TIM_Init
     /tmp/cc9v2zNu.s:1127   .text.MX_TIM_Init:00000000000001dc $d
                            *COM*:0000000000000040 htim_right
                            *COM*:0000000000000040 htim_left
     /tmp/cc9v2zNu.s:1136   .text.MX_ADC1_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:1143   .text.MX_ADC1_Init:0000000000000000 MX_ADC1_Init
     /tmp/cc9v2zNu.s:1326   .text.MX_ADC1_Init:0000000000000110 $d
                            *COM*:0000000000000030 hadc1
                            *COM*:0000000000000014 adc_buffer
     /tmp/cc9v2zNu.s:1337   .text.MX_ADC2_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:1344   .text.MX_ADC2_Init:0000000000000000 MX_ADC2_Init
     /tmp/cc9v2zNu.s:1473   .text.MX_ADC2_Init:00000000000000a8 $d
                            *COM*:0000000000000030 hadc2
     /tmp/cc9v2zNu.s:1480   .text._Error_Handler:0000000000000000 $t
     /tmp/cc9v2zNu.s:1487   .text._Error_Handler:0000000000000000 _Error_Handler
     /tmp/cc9v2zNu.s:1502   .text.MX_TIM3_Softwatchdog_Init:0000000000000000 $t
     /tmp/cc9v2zNu.s:1509   .text.MX_TIM3_Softwatchdog_Init:0000000000000000 MX_TIM3_Softwatchdog_Init
     /tmp/cc9v2zNu.s:1619   .text.MX_TIM3_Softwatchdog_Init:0000000000000094 $d
                            *COM*:0000000000000040 htim3
                            *COM*:0000000000000044 hdma_usart3_tx
                            *COM*:0000000000000044 hdma_usart3_rx
                            *COM*:0000000000000040 huart3
     /tmp/cc9v2zNu.s:1642   .rodata.MX_TIM3_Softwatchdog_Init.str1.4:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_UART_Init
HAL_GPIO_Init
HAL_DMA_Init
HAL_I2C_Init
HAL_TIM_PWM_Init
HAL_TIMEx_MasterConfigSynchronization
HAL_TIM_PWM_ConfigChannel
HAL_TIMEx_ConfigBreakDeadTime
HAL_TIM_SlaveConfigSynchronization
HAL_TIM_PWM_Start
HAL_TIMEx_PWMN_Start
HAL_ADC_Init
ARM GAS  /tmp/cc9v2zNu.s 			page 45


HAL_ADCEx_MultiModeConfigChannel
HAL_ADC_ConfigChannel
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIM_Base_Start_IT
